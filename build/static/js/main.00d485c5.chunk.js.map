{"version":3,"sources":["components/layout.js","utils/common/browser.js","utils/api/unsplash/url.js","utils/api/axios.js","utils/api/index.js","utils/api/unsplash/index.js","views/MyText/forms/editMail.js","views/MyText/mailbox.js","views/MyText/forms/editSMS.js","views/MyText/SMS.js","views/MyText/dingdingRecord.js","views/MyText/forms/editDing.js","views/MyText/dingdingRobot.js","views/MyText/dingdingGroup.js","views/MyText/dingdingNotice.js","views/task/history.js","views/task/historyDetail.js","views/task/forms/editForm.jsx","views/task/task.js","router/index.js","App.js","index.js"],"names":["Content","Layout","Sider","SubMenu","Menu","withRouter","props","pathname","location","defaultSub","defaultItem","length","index1","indexOf","index2","lastIndexOf","slice","itemNode","document","querySelector","click","style","overflow","background","height","paddingTop","width","breakpoint","collapsedWidth","overflowY","className","mode","forceSubMenuRender","defaultOpenKeys","defaultSelectedKeys","title","MailOutlined","fontSize","color","Item","flag","to","ProfileOutlined","padding","children","ua","window","navigator","userAgent","isIE","match","appName","ret","version","num","parseInt","baseUrl","getData","getUser","getMailbox","deleteMailbox","createMailModal","editMail","getSMS","deleteSMS","createSMS","editSMS","getDingRecord","deleteDingRecord","createDingRecord","editDingRecord","getDingRobot","deleteDingRobot","createDingRobot","editDingRobot","getDingGroup","deleteDingGroup","createDingGroup","editDingGroup","getDingNotice","deleteDingNotice","createDingNotice","editDingNotice","getHistory","createHistory","deleteHistory","detailHistory","sendHistory","getTask","deleteTask","detailTask","editTask","sendTask","transferTask","Upload","http","axios","create","headers","timeout","defaults","post","put","interceptors","request","use","config","console","log","url","addAppScanAsset","method","data","JSON","stringify","browser","symbol","Date","now","error","Promise","reject","response","info","status","statusText","code","msg","instance","params","options","get","delete","header","Authorization","api","urls","id","param","EditMail","Input","TextArea","state","path","fileList","editFormRef","React","createRef","uploadHandler","file","formData","FormData","append","apis","then","res","html","initValue","toHTML","download","setState","BraftEditor","createEditorState","controls","extendControls","key","type","component","accept","showUploadList","customRequest","data-title","PictureOutlined","onEditorChange","val","option","map","item","substring","addRes","current","getFieldValue","ele","name","Array","from","Set","i","push","index","j","splice","setFieldsValue","variable","editorValue","handleCancel","onCancel","resetFields","handleOk","onOk","currentRowData","validateFields","values","catch","errorInfo","nextProps","this","content","visible","isCopy","uploadProps","maxCount","onRemove","onChange","message","success","beforeUpload","okText","cancelText","maskStyle","destroyOnClose","labelCol","span","ref","label","rules","required","initialValue","placeholder","marginLeft","LinkOutlined","CaretDownOutlined","defaultValue","Object","hasOwnProperty","call","List","fields","remove","fieldKey","restField","FormItem","disabled","display","marginBottom","align","MinusCircleOutlined","onClick","sm","placement","trigger","Component","confirm","Modal","Mailbox","dataSource","pagination","pageSize","showSizeChanger","deleteVisible","titleValue","filter_fields","searchText","searchedColumn","searchArr","pageChange","page","size","getRefresh","searchInput","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","clearFilters","boxShadow","borderRadius","node","prefix","SearchOutlined","value","e","handleSearch","onPressEnter","marginTop","handleReset","border","margin","search","icon","filterIcon","render","text","highlightStyle","backgroundColor","searchWords","searchData","autoEscape","textToHighlight","toString","target","arr","searchDataBefore","columns","textWrap","ellipsis","obj","handleEdit","handleCopy","handleDelete","formRef","showModal","onFinish","sub_type","subject","content_format","err","that","ExclamationCircleOutlined","deleteAction","domEvent","assign","editVisible","handleEditCancel","handleEditOk","handleCopyOk","page_size","results","showQuickJumper","total","showTotal","position","dataArr","keys","left","top","zIndex","PlusCircleOutlined","scroll","y","bodyStyle","validator","_","callback","handleTitleChange","bind","EditSMS","isSMS","formdata","Select","Option","initialValues","SMS","myKey","Math","random","rows","cols","editDing","MarkdownContent","editorRef","onMarkdownChange","source","getInstance","getMarkdown","t","btns","Group","onTextareaChange","previewStyle","initialEditType","useCommandShortcut","markdown","onload","editor","func","getHTML","add","block","PlusOutlined","_value","DingDingRobot","flowState","textareaValue","btnsArray","actionURL","radioChange","action","newFileList","outer","btnOrientation","users","handleTextareaChange","onTitleChange","onURLChange","dingdingNotice","MyHistory","visibleDetail","styleFlowState","RadioFlowState","atflowState","tpl_id","cronValue","toWhoValue","theUserName","cc","bcc","webhook","is_at_all","theUser2Name","mailDateSource","SMSDateSource","userDateSource","robotDateSource","groupDateSource","noticeDateSource","detail","tpl","reason","agent_id","chat_id","task_id","showSearch","allowClear","optionFilterProp","onSelect","filterOption","input","toLowerCase","styleEtoC","CheckCircleOutlined","CloseCircleOutlined","ClockCircleOutlined","InfoCircleOutlined","fixed","handleDetail","handleSend","cronExample","datas","username","is_run_now","crontab_info","is_periodic_tasks","user_id_list","sendAction","HistoryOutlined","x","footer","created_at","receiver","HistoryDetail","onFocusMail","onFocusSMS","onFocusRobot","onFocusGroup","onFocusNotice","onFocusUser","MailCopyChange","op","SMSCopyChange","RobotCopyChange","GroupCopyChange","NoticeCopyChange","userChildren","mailChildren","SMSChildren","robotChildren","noticeChildren","groupChildren","justify","htmlType","handleUserChange","onFocus","handleToWhoChange","handleCronChange","notFoundContent","handleUser2Change","minHeight","handleWebhookChange","moment","locale","EditForm","recordDateSource","cronChange","onFocusRecord","recordFlowState","is_alone","send_style","recordChildren","wrapperCol","MyTask","transferVisible","editLoading","addUserModalVisible","addUserModalLoading","choice","transferId","overlay","handleTransfer","preventDefault","DoubleRightOutlined","transFormRef","RecordCopyChange","www","secret","aloneNo","participant_id_list","due_timedelta","handleTransferOk","handleRadioChange","uuid","Router","exact","MyMail","dingdingRecord","dingdingRobot","dingdingGroup","App","ReactDOM","zhCN","getElementById"],"mappings":"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","file":"static/js/main.00d485c5.chunk.js","sourcesContent":["import { Layout, Menu } from \"antd\";\n// import { Icon } from '@ant-design/compatible';\nimport {\n    ProfileOutlined,\n    MailOutlined,\n    FileSearchOutlined,\n    // DownOutlined\n} from '@ant-design/icons';\nimport React from \"react\";\nimport \"antd/dist/antd.css\";\nimport SRBasicLayout from \"@xmly/sr_layout\";\nimport \"./layout.scss\";\n\nimport { NavLink, Route, Redirect, Switch } from \"react-router-dom\";\n\nimport { withRouter } from \"react-router-dom\";\n// import { connect } from 'react-redux';\n\n\nconst { Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst Layouts = (props) => {\n    var pathname = props.location.pathname;\n    var defaultSub = \"task\";\n    var defaultItem = \"task-task\";\n    if (pathname.length > 1) {\n        let index1 = pathname.indexOf('/');\n        let index2 = pathname.lastIndexOf('/');\n        if (index1 === index2) {\n            defaultSub = pathname.slice(index1 + 1, pathname.length);\n        } else {\n            defaultSub = pathname.slice(index1 + 1, index2);\n        }\n        defaultItem = `${defaultSub}-${pathname.slice(index2 + 1, pathname.length)}`;\n        //   console.log(index1, index2,pathname, defaultSub, defaultItem);\n\n        // defaultSub = pathname.match(/(^\\/.*?\\/|^\\/\\S+$)/)[0].match(/[^\\/]+/)[0];\n        // defaultItem = defaultSub + '-' + pathname.match(/((?<=\\/\\S*)\\/.*?\\/|(?<=\\/\\S*)[^\\/]$|[^\\/]+$)/)[0].match(/[^\\/]+/);\n    }\n    var itemNode = document.querySelector(\"[flag=\\\"\" + defaultItem + \"\\\"]\");\n    if (itemNode) {\n        //   console.log(\"1\",itemNode)\n        itemNode.click();\n    }\n    return (\n        <SRBasicLayout style={{ overflow: \"hidden\", background: \"#fff\" }}>\n            <Layout style={{ height: \"100%\", paddingTop: \"20px\" }}>\n                <Sider width=\"171\" breakpoint=\"lg\" collapsedWidth=\"0\" style={{ overflowY: 'auto', height: \"100%\" }}>\n                    <div className=\"logo\">推送系统</div>\n                    <div style={{ height: \"calc(100%-50px)\"}}>\n                        <Menu mode=\"inline\" forceSubMenuRender defaultOpenKeys={[defaultSub]} defaultSelectedKeys={[defaultItem]}>\n                            {/**我的推送*/}\n                            <SubMenu key=\"task\" title={<span><MailOutlined style={{ fontSize: \"15px\", color: \"#40404C\" }} /><span>推送管理</span></span>} >\n                                <Menu.Item key=\"task-task\" flag=\"task-task\">\n                                    <NavLink to=\"/task\">推送任务</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"task-history\" flag=\"task-history\">\n                                    <NavLink to=\"/task/history\">历史推送</NavLink>\n                                </Menu.Item>\n                            </SubMenu>\n\n                            {/**消息模版*/}\n                            <SubMenu key=\"my\" title={<span><ProfileOutlined style={{ fontSize: \"15px\", color: \"#40404C\" }} /><span>消息模版</span></span>} flag=\"my\">\n                                <Menu.Item key=\"my-mailbox\" flag=\"my-mailbox\">\n                                    <NavLink to=\"/my/mailbox\">邮件</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"my-SMS\" flag=\"my-SMS\">\n                                    <NavLink to=\"/my/SMS\">短信</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"my-dingdingRecord\" flag=\"my-dingdingRecord\">\n                                    <NavLink to=\"/my/dingdingRecord\">钉钉待办</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"my-dingdingRobot\" flag=\"my-dingdingRobot\">\n                                    <NavLink to=\"/my/dingdingRobot\">钉钉机器人</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"my-dingdingGroup\" flag=\"my-dingdingGroup\">\n                                    <NavLink to=\"/my/dingdingGroup\">钉钉群通知</NavLink>\n                                </Menu.Item>\n                                <Menu.Item key=\"my-dingdingNotice\" flag=\"my-dingdingNotice\">\n                                    <NavLink to=\"/my/dingdingNotice\">钉钉工作通告</NavLink>\n                                </Menu.Item>\n                            </SubMenu>\n\n                        </Menu>\n                    </div>\n                </Sider>\n                <Layout style={{ height: \"100%\", padding: \"0 10px\" }}>\n                    <Content\n                    // style={{overflow:\"scroll\"}}\n                    >\n                        {/* <Auth requires={\"/home\"}>\n                             <button>test</button>\n                             </Auth> */}\n                        {props.children}\n                    </Content>\n                </Layout>\n            </Layout>\n        </SRBasicLayout>\n    )\n\n};\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        state: state\n    };\n};\n\n\nexport default withRouter(Layouts);\n","var ua = window.navigator.userAgent;\nvar isIE = \"ActiveXObject\" in window;\nvar isChrome = ua.match(/Chrome/i);\nvar isMobile = !!(\n  ua.match(/(iPhone|iPad|iPod)/i) ||\n  ua.match(/Android/i) ||\n  ua.match(/Windows Phone/i) ||\n  ua.match(/IEMobile/i)\n);\nvar IEVersion = null;\nvar isIE8, isIE9, isIE10, isIE11;\nisIE8 = isIE9 = isIE10 = isIE11 = false;\nvar appName = navigator.appName;\nif (appName === \"Microsoft Internet Explorer\" || isIE) {\n  var ret = ua.match(/MSIE (\\d+[.\\d]*)/);\n  if (ret) {\n    var version = ret[1];\n    IEVersion = version;\n    var num = parseInt(version, 10);\n    isIE8 = num === 8;\n    isIE9 = num === 9;\n    isIE10 = num === 10;\n    isIE11 = num === 11;\n  }\n}\n\n/**\n * 浏览器环境判断模块\n */\nexport default {\n  isChrome, // 是否Chrome浏览器\n  isIE, // 是否IE浏览器\n  isMobile, // 是否移动端\n  IEVersion,\n  isIE8,\n  isIE9,\n  isIE10,\n  isIE11,\n};\n","const baseUrl = \"/api/v1.0\";\n//const baseUrl = \"\";\n//const baseUrl = \"http://192.168.3.88:8000/api/v2.0\";\n\nexport default {\n  getData: baseUrl + '/tpl',\n\n  getUser:  baseUrl + '/mail',\n  \n  getMailbox:baseUrl + '/tpl/mail',\n  deleteMailbox:baseUrl +'/tpl/mail/',\n  createMailModal: baseUrl + '/tpl/mail',\n  editMail: baseUrl + '/tpl/mail',\n\n  getSMS:baseUrl + '/tpl/sms',\n  deleteSMS:baseUrl +'/tpl/sms/',\n  createSMS: baseUrl + '/tpl/sms',\n  editSMS: baseUrl + '/tpl/sms',\n\n  getDingRecord: baseUrl + '/tpl/ding_record',\n  deleteDingRecord:baseUrl +'/tpl/ding_record/',\n  createDingRecord:baseUrl +'/tpl/ding_record',\n  editDingRecord:baseUrl +'/tpl/ding_record',\n\n  getDingRobot: baseUrl + '/tpl/ding_robot',\n  deleteDingRobot:baseUrl +'/tpl/ding_robot/',\n  createDingRobot:baseUrl +'/tpl/ding_robot',\n  editDingRobot:baseUrl +'/tpl/ding_robot',\n\n  getDingGroup: baseUrl + '/tpl/ding_group',\n  deleteDingGroup:baseUrl +'/tpl/ding_group/',\n  createDingGroup:baseUrl +'/tpl/ding_group',\n  editDingGroup:baseUrl +'/tpl/ding_group',\n\n  getDingNotice: baseUrl + '/tpl/ding_notice',\n  deleteDingNotice:baseUrl +'/tpl/ding_notice/',\n  createDingNotice:baseUrl +'/tpl/ding_notice',\n  editDingNotice:baseUrl +'/tpl/ding_notice',\n\n  getHistory: baseUrl + '/task/history',\n  createHistory: baseUrl + '/task',\n  deleteHistory: baseUrl + '/task/history/id',\n  detailHistory: baseUrl + '/task/history/id',\n  sendHistory:baseUrl + '/task/history/id',\n\n  getTask: baseUrl + '/task',\n  deleteTask: baseUrl + '/task/id',\n  detailTask: baseUrl + '/task/id',\n  editTask:baseUrl + '/task/id',\n  sendTask:baseUrl + '/task/id',\n  transferTask:baseUrl + '/task',\n\n  Upload: baseUrl +'/upload'\n};\n","import axios from \"axios\";\nimport browser from \"../common/browser\";\nimport url from \"./unsplash/url\";\n\n// 创建 axios 实例\nlet http = axios.create({\n  // headers: {'Content-Type': 'application/json'},\n  headers: {\n    \"x-requested-with\": \"XMLHttpRequest\",\n    // Cookie: 'csrftoken=ccrwPjqMMft5W6HHTPihbHLoMZT1jGAiXrr4h5I8XJe0ptILKRkROyWGw5dBvGkz; sessionid=stoi7y5r2nhkucrypqqh7rtcq0ukru5d'\n  },\n  timeout: 600000,\n});\n\n// 设置 post、put 默认 Content-Type\nhttp.defaults.headers.post[\"Content-Type\"] = \"application/json\";\nhttp.defaults.headers.put[\"Content-Type\"] = \"application/json\";\n// 添加请求拦截器\nhttp.interceptors.request.use(\n  (config) => {\n    console.log(config);\n    //发送文件时不需要对数据进行处理\n    if(config.url === url.Upload){\n      return config;\n    }\n    if(config.url === url.addAppScanAsset){\n      return config;\n    }\n\n    if (config.method === \"post\" || config.method === \"put\") {\n      // post、put 提交时，将对象转换为string, 为处理Java后台解析问题\n\n      config.data = JSON.stringify(config.data);\n    } \n    else if (config.method === \"get\" && browser.isIE) {\n      // 给GET 请求后追加时间戳， 解决IE GET 请求缓存问题\n      let symbol = config.url.indexOf(\"?\") >= 0 ? \"&\" : \"?\";\n      config.url += symbol + \"_=\" + Date.now();\n      console.log(\"==========\", config.url, symbol, Date.now());\n    }\n    // 请求发送前进行处理\n    return config;\n  },\n  (error) => {\n    // 请求错误处理\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\n// 添加响应拦截器\nhttp.interceptors.response.use(\n  (response) => {\n    console.log(response, \"response\");\n    let { data } = response;\n    return data;\n  },\n  (error) => {\n    console.log(error.response);\n    error.response = error.response || \"\";\n    // if (error.response.status === 401) {\n    //   window.location.reload();\n    // }\n    console.log(\"error\" + error);\n    let info = {};\n    let { status, statusText, data } = error.response;\n    if (!error.response) {\n      info = {\n        code: 5000,\n        msg: \"Network Error\",\n      };\n    } else {\n      // 此处整理错误信息格式\n      info = {\n        code: status,\n        data: data,\n        msg: statusText,\n      };\n    }\n    return Promise.reject(info);\n  }\n);\n\n// /**\n//  * 创建统一封装过的 axios 实例\n//  * @return {AxiosInstance}\n//  */\nexport default function () {\n  return http;\n}\n","import axios from \"./axios\";\n\nlet instance = axios();\nexport default {\n  get(url, params, headers) {\n    let options = {};\n    if (params) {\n      options.params = params;\n    }\n\n    if (headers) {\n      options.headers = headers;\n    }\n\n    return instance.get(url, options);\n  },\n  post(url, params, headers) {\n    let options = {};\n    if (headers) {\n      options.headers = headers;\n    }\n    return instance.post(url, params, options);\n  },\n  put(url, params, headers) {\n    let options = {};\n    if (headers) {\n      options.headers = headers;\n    }\n    return instance.put(url, params, options);\n  },\n  delete(url, params, headers) {\n    let options = {};\n    if (params) {\n      options.params = params;\n    }\n    console.log(options.params);\n    if (headers) {\n      options.headers = headers;\n    }\n\n    return instance.delete(url, options);\n  },\n};\n","import api from \"../index\";\nimport urls from \"./url\";\n// import { formatUrl } from '../../common/utils'\n// 这个东西是unsplash要求加在header里的验证，有兴趣的同学可以去看他的api，此处不再赘述\nconst header = {\n  // Authorization: \"Client-ID xxxxxxx\",\n  Authorization: \"8918c26c91364e9f9447c241cb46ff09\",\n  \"Content-Type\": \"application/json\",\n};\n\nexport default {\n  getData: (params) => {\n    return api.get(urls.getData, params, header)\n  },\n  //获取发件人邮箱\n  getUser: (params) => {\n    return api.get(urls.getUser, params, header)\n  },\n\n  //mailbox\n  getMailbox: (params) => {\n    return api.get(urls.getMailbox, params, header)\n  },\n  createMailModal: (params) => {\n    return api.post(urls.createMailModal, params, header)\n  },\n  deleteMailbox: (id) => {\n    return api.delete(urls.deleteMailbox + id, {}, header)\n  },\n  editMail: (id, param) => {\n    return api.put(urls.editMail + \"/\" + id, param, header)\n  },\n\n\n  //sms\n  getSMS: (params) => {\n    return api.get(urls.getSMS, params, header)\n  },\n  createSMS: (params) => {\n    return api.post(urls.createSMS, params, header)\n  },\n  deleteSMS: (id) => {\n    return api.delete(urls.deleteSMS + id, {}, header)\n  },\n  editSMS: (id, param) => {\n    return api.put(urls.editSMS + \"/\" + id, param, header)\n  },\n\n  // dingdingRecord\n  getDingRecord: (params) => {\n    return api.get(urls.getDingRecord, params, header)\n  },\n  createDingRecord: (params) => {\n    return api.post(urls.createDingRecord, params, header)\n  },\n  deleteDingRecord: (id) => {\n    return api.delete(urls.deleteDingRecord + id, {}, header)\n  },\n  editDingRecord: (id, params) => {\n    return api.put(urls.editDingRecord + \"/\" + id, params, header)\n  },\n\n  // dingdingRobot\n  getDingRobot: (params) => {\n    return api.get(urls.getDingRobot, params, header)\n  },\n  createDingRobot: (params) => {\n    return api.post(urls.createDingRobot, params, header)\n  },\n  deleteDingRobot: (id) => {\n    return api.delete(urls.deleteDingRobot + id, {}, header)\n  },\n  editDingRobot: (id, params) => {\n    return api.put(urls.editDingRobot + \"/\" + id, params, header)\n  },\n\n\n  //dingdingGroup\n  getDingGroup: (params) => {\n    return api.get(urls.getDingGroup, params, header)\n  },\n  createDingGroup: (params) => {\n    return api.post(urls.createDingGroup, params, header)\n  },\n  deleteDingGroup: (id) => {\n    return api.delete(urls.deleteDingGroup + id, {}, header)\n  },\n  editDingGroup: (id, param) => {\n    return api.put(urls.editDingGroup + \"/\" + id, param, header)\n  },\n\n\n  //dingdingNotice\n  getDingNotice: (params) => {\n    return api.get(urls.getDingNotice, params, header)\n  },\n  createDingNotice: (params) => {\n    return api.post(urls.createDingNotice, params, header)\n  },\n  deleteDingNotice: (id) => {\n    return api.delete(urls.deleteDingNotice + id, {}, header)\n  },\n  editDingNotice: (id, param) => {\n    return api.put(urls.editDingNotice + \"/\" + id, param, header)\n  },\n\n  //历史推送\n  getHistory: (params) => {\n    return api.get(urls.getHistory, params, header)\n  },\n  createHistory: (params) => {\n    return api.post(urls.createHistory, params, header)\n  },\n  deleteHistory: (id) => {\n    return api.delete(urls.deleteHistory + \"/\" + id, {}, header)\n  },\n  detailHistory: (id) => {\n    return api.get(urls.detailHistory + \"/\" + id, {}, header)\n  },\n  sendHistory: (id) => {\n    return api.post(urls.sendHistory + \"/\" + id, {}, header)\n  },\n\n  //推送管理\n  getTask: (params) => {\n    return api.get(urls.getTask, params, header)\n  },\n  deleteTask: (id) => {\n    return api.delete(urls.deleteTask + \"/\" + id, {}, header)\n  },\n  detailTask: (id) => {\n    return api.get(urls.detailTask + \"/\" + id, {}, header)\n  },\n  editTask: (id, params) => {\n    return api.put(urls.editTask + \"/\" + id, params, header)\n  },\n  sendTask: (id) => {\n    return api.post(urls.sendTask + \"/\" + id, {}, header)\n  },\n  transferTask: (id, params) => {\n    return api.post(urls.transferTask + \"/\" + id + \"/transfer\", params, header)\n  },\n\n\n\n\n\n  Upload: (params) => {\n    return api.post(urls.Upload, params, { \"Content-Type\": 'multipart/form-data' })\n  },\n};\n","import React, { Component } from \"react\";\nimport apis from \"../../../utils/api/unsplash/index\";\nimport { PictureOutlined, LinkOutlined, CaretDownOutlined, MinusCircleOutlined } from '@ant-design/icons';\nimport { Form, Input, Select, Rate, Modal, Radio, message, Popover, Cascader, Col, Row, Upload, Space } from \"antd\";\nimport BraftEditor from \"braft-editor\";\n\n\nconst { TextArea } = Input\n\nexport default class EditMail extends Component {\n    state = {\n        // htmlContent: BraftEditor.createEditorState(\"111\"),\n        path:\"\",\n        fileList:[],\n\n    };\n\n\n    componentWillReceiveProps(nextProps) {\n        // console.log(\"componentWillReceiveProps\")\n        if (this.props.currentRowData !== nextProps.currentRowData) {\n          this.setState({\n              path:nextProps.currentRowData.path,\n              fileList:nextProps.currentRowData.path ? [{\n                name: '原有附件',\n                status: 'done',\n                url: nextProps.currentRowData.path,\n            }] : [],\n               editorValue:nextProps.currentRowData.content.content\n          });\n        }\n      }\n\n    editFormRef = React.createRef();\n    \n    // async componentDidMount(){\n    //     console.log(Object.hasOwnProperty.call(this.props.currentRowData, 'content') ? this.props.currentRowData.content.content : null)\n    // }\n\n\n    // html编辑器里的添加图片\n    uploadHandler = (param) => {\n        if (!param.file) {\n            return false\n        }\n        console.log(param.file)\n        var formData = new FormData();\n        formData.append('file', param.file)\n        console.log(formData)\n        apis.Upload(formData).then(res => {\n            if (res.code === 0) {\n                let html = this.state.initValue.toHTML()\n                html += `<image src=http://192.168.41.49${res.data.download} />`\n                console.log(html)\n                this.setState({\n                    initValue: BraftEditor.createEditorState(html)\n                })\n            }\n        })\n    }\n\n    //html编辑器功能栏\n    controls = ['bold', 'italic', 'underline', 'separator', 'text-color', 'strike-through', 'text-align', 'code'];\n    extendControls = [\n        {\n            key: 'antd-uploader',\n            type: 'component',\n            component: (\n                <Upload\n                    accept=\"image/*\"\n                    showUploadList={false}\n                    customRequest={this.uploadHandler}\n                >\n                    {/* 这里的按钮最好加上type=\"button\"，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */}\n                    <button type=\"button\" className=\"control-item button upload-button\" data-title=\"插入图片\">\n                        <PictureOutlined style={{ fontSize: '13px', color: '#535355' }} />\n                        {/* <Icon type=\"picture\" theme=\"filled\" /> */}\n                    </button>\n                </Upload>\n            )\n        }\n    ]\n    \n    onEditorChange = (val) => {\n        // console.log(val)\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = val.toHTML().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.editFormRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.editFormRef.current.setFieldsValue({ variable: addRes });\n        }\n\n        this.setState({ editorValue:val.toHTML() })\n    }\n\n    render() {\n        const {\n            visible,\n            currentRowData,\n            isCopy\n        } = this.props;\n\n\n        const { title, variable, path } = currentRowData;\n\n\n        const uploadProps = {\n            // action: 'http://192.168.41.49/api/v1.0/upload',\n            customRequest:(param) => {\n                console.log(param.file)\n                if (!param.file) {\n                    return false\n                }\n                var formData = new FormData();\n                formData.append('file', param.file)\n                // console.log(formData)\n                apis.Upload(formData).then(res=>{\n                    if(res.code === 0){\n                        this.setState({\n                            path : res.data.download\n                          })\n                    }\n                })\n            },\n            maxCount:1,\n            // onRemove: (file) => {\n            //     this.setState(({ fileList }) => {\n            //         console.log(file,fileList)\n            //         const index = fileList.indexOf(file);\n            //         // console.log(index)\n            //         const newFileList = fileList;\n            //         newFileList.splice(index, 1);\n            //         this.setState({\n            //             fileList: this.newFileList,\n            //             path:\"\"\n            //         });\n            //         return false;\n            //     });\n            // },\n            onRemove: (file) => {\n                this.setState({\n                    fileList: []\n                });\n                return true\n            },\n            onChange: (info) => {\n                if (info.file.status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (info.file.status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully`);\n                } else if (info.file.status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n            beforeUpload: (file) => {\n                console.log('beforeUpload:', file)\n                this.state.fileList.push(file)\n                this.setState({\n                    fileList: [file] \n                })\n                \n                // return false;\n            },\n\n        }\n\n        // let formdata = { ...currentRowData }\n        // formdata = {\n        //     ...formdata,\n        //     content: Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.content : ''\n        // }\n\n        // let htmlContent= BraftEditor.createEditorState(Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.content : null);\n        // let htmlContent = BraftEditor.createEditorState(\"23131\")\n        // console.log(htmlContent.toHTML())\n        return (\n            <Modal\n                title={isCopy ? '复制' : '编辑'}\n                visible={visible}\n                onCancel={this.handleCancel}\n                onOk={this.handleOk}\n                okText={isCopy ? '创建' : '更新'}\n                cancelText=\"取消\"\n                maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                width=\"50%\"\n                destroyOnClose={true}\n            >\n\n                <Form\n                    className=\"addModel\"\n                    name=\"basic\"\n                    labelCol={{ span: 4 }}\n                    ref={this.editFormRef}\n                >\n                    <Form.Item\n                        label=\"短信标题\"\n                        name=\"title\"\n                        rules={[{ required: true }]}\n                        initialValue={title}\n                    >\n                        <Input\n                            style={{ width: 463, height: 40 }}\n                            placeholder=\"请输入模板名称\" />\n                    </Form.Item>\n\n\n\n                    <Form.Item style={{ marginLeft: 100 }}>\n                        <Upload fileList = {this.state.fileList} {...uploadProps}>\n                            <LinkOutlined style={{ fontSize: '13px', color: '#000000' }} />添加附件｜<CaretDownOutlined />\n                        </Upload>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"邮件正文\"\n                        rules={[{ required: true }]}\n                    >\n                        <BraftEditor\n                            defaultValue={ BraftEditor.createEditorState(Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.content : null)}\n                            controls={this.controls}\n                            extendControls={this.extendControls}\n                            onChange={this.onEditorChange}\n                            placeholder=\"请输入邮件正文，支持Html语法\"\n                            className=\"html-BraftEditor\"\n                        />\n                    </Form.Item>\n                    <Form.List  name=\"variable\" initialValue={variable} >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n\n                </Form>\n\n\n                <Row>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                        <Popover\n                            className=\"shili\"\n                            style\n                            placement=\"right\"\n                            content={(\n                                <div>\n                                    <p>示例：</p>\n                                    <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                </div>\n                            )}\n                            trigger=\"click\"\n\n                        >\n                            <span>查看示例</span>\n                        </Popover>\n\n                    </Col>\n                </Row>\n\n\n\n\n\n            </Modal>\n\n\n\n        );\n\n    }\n\n    handleCancel = () => {\n        const { onCancel } = this.props\n        this.state.file={};\n\n        this.editFormRef.current.resetFields();\n        onCancel();\n    }\n\n    handleOk = () => {\n        const { item = {}, onOk } = this.props\n        const { id } = this.props.currentRowData\n\n        this.editFormRef.current.validateFields()\n            .then(values => {\n                const data = {\n                    ...values,\n                    editorValue:this.state.editorValue,\n                    path: this.state.path,\n                    variable:this.editFormRef.current.getFieldValue('variable')\n                }\n                console.log(data);\n\n                onOk(id, data)\n            }\n            )\n            .catch(errorInfo => {\n                console.log(errorInfo)\n            })\n    }\n}\n\n\n\n\n","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Upload, message, Row, Col, Popover, Space, Tooltip } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PictureOutlined, CaretDownOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusCircleOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './mailbox.scss';\nimport 'braft-editor/dist/index.css';\nimport BraftEditor from \"braft-editor\";\n\nimport EditMail from \"./forms/editMail\"\n\n\nconst { confirm } = Modal;\n\n\nexport default class Mailbox extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true\n        },\n        current: 1,//目前正在查看的item id\n        pageSize: 10,\n\n        visible: false,\n        deleteVisible: false,\n        titleValue: '',\n        initValue: BraftEditor.createEditorState(null),\n        fileList: [],\n        file: null,\n        path: '',\n        currentRowData: '',\n        isCopy: false,\n        addRes: [],\n\n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n\n    componentDidMount() {\n        // console.log(\"121\")\n        apis.getMailbox({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            // console.log(res.data.fiter_fields)\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            // console.log(res)\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n            console.log(this.state.searchArr)\n        });\n    }\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    }\n\n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150,\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content) => {\n                return <div>\n                        <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                        </div>;\n            },\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n    // props = {\n    //     name: 'file',\n    //     action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    //     headers: {\n    //         authorization: 'authorization-text',\n    //     },\n    //     onChange(info) {\n    //         if (info.file.status !== 'uploading') {\n    //             console.log(info.file, info.fileList);\n    //         }\n    //         if (info.file.status === 'done') {\n    //             message.success(`${info.file.name} file uploaded successfully`);\n    //         } else if (info.file.status === 'error') {\n    //             message.error(`${info.file.name} file upload failed.`);\n    //         }\n    //     },\n    // };\n\n    uploadProps = {\n        // action: 'http://192.168.41.49/api/v1.0/upload',\n        customRequest: (param) => {\n            if (!param.file) {\n                return false\n            }\n            var formData = new FormData();\n            formData.append('file', param.file)\n            // console.log(formData)\n            apis.Upload(formData).then(res => {\n                if (res.code === 0) {\n                    this.setState({\n                        path: res.data.download,\n                        fileList: [param.file]\n                    })\n                }\n            })\n        },\n        onRemove: (file) => {\n            this.setState({\n                fileList: []\n            });\n            return true\n        },\n\n        onChange: (info) => {\n\n            // let fileList = [...info.fileList];\n\n            // if (fileList.length === 2) {\n            //     let newFileList = fileList.slice(-1);\n            //     this.setState({\n            //         fileList: this.newFileList,\n            //     });\n            //     message.warning(\"一个版本只能上传一个文件\")\n            // };\n\n            if (info.file.status !== 'uploading') {\n                console.log(info.file, info.fileList);\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`);\n            }\n        },\n\n        beforeUpload: (file) => {\n            console.log('beforeUpload:', file)\n            this.state.fileList.push(file)\n            this.setState({\n                fileList: [file]\n            })\n\n        },\n        maxCount: 1,\n    }\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n\n    onEditorChange = (val) => {\n        // console.log(val)\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = val.toHTML().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele => ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({ name: res[i] })\n            }\n            for (let i = 0; i < val.length; i++) {\n                let index = -1\n                for (let j = 0; j < addRes.length; j++) {\n                    if (val[i] === addRes[j].name) index = j;\n                }\n                if (index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n\n        // console.log(addRes);\n\n\n        this.setState({\n            initValue: val,\n            // addRes: addRes\n        })\n    }\n\n    // html编辑器里的添加图片\n    uploadHandler = (param) => {\n        if (!param.file) {\n            return false\n        }\n        console.log(param.file)\n        var formData = new FormData();\n        formData.append('file', param.file)\n        console.log(formData)\n        apis.Upload(formData).then(res => {\n            if (res.code === 0) {\n                let html = this.state.initValue.toHTML()\n                // html += `<image src=http://192.168.41.49${res.data.download} />`\n                html += `<image src=${res.data.download} />`\n                console.log(html)\n                this.setState({\n                    initValue: BraftEditor.createEditorState(html)\n                })\n            }\n        })\n    }\n\n    formRef = React.createRef();\n\n    //html编辑器功能栏\n    controls = ['bold', 'italic', 'underline', 'separator', 'text-color', 'strike-through', 'text-align', 'code'];\n    extendControls = [\n        {\n            key: 'antd-uploader',\n            type: 'component',\n            component: (\n                <Upload\n                    accept=\"image/*\"\n                    showUploadList={false}\n                    customRequest={this.uploadHandler}\n                >\n                    {/* 这里的按钮最好加上type=\"button\"，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */}\n                    <button type=\"button\" className=\"control-item button upload-button\" data-title=\"插入图片\">\n                        <PictureOutlined style={{ fontSize: '13px', color: '#535355' }} />\n                        {/* <Icon type=\"picture\" theme=\"filled\" /> */}\n                    </button>\n                </Upload>\n            )\n        }\n    ]\n\n\n\n    render() {\n        const { initValue, titleValue } = this.state\n        // console.log(this.state.fileList)\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined /> 邮件模板\n                </Divider>\n\n           \n                {/* 下方表格 */}\n                <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建模版\"\n                    width=\"645px\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    bodyStyle={{margin:'10px 10px'}}\n                    destroyOnClose={true}\n                >\n                    <Form\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                    >\n                        <Form.Item\n                            label=\"邮件标题\"\n                            name=\"subject\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <Input\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                placeholder=\"请输入模板名称\"\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                            />\n                        </Form.Item>\n\n                        <Form.Item style={{ marginLeft: 100 }}>\n                            <Upload\n                                fileList={this.state.fileList}\n                                {...this.uploadProps}>\n                                <LinkOutlined style={{ fontSize: '13px', color: '#000000' }} />添加附件｜<CaretDownOutlined />\n                            </Upload>\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"邮件正文\"\n                            name=\"info\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!initValue) {\n                                            callback('请输入邮件正文')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <BraftEditor\n                                value={initValue}\n                                controls={this.controls}\n                                extendControls={this.extendControls}\n                                onChange={this.onEditorChange}\n                                placeholder=\"请输入邮件正文，支持Html语法\"\n                                className=\"html-BraftEditor\"\n                            />\n                            <Popover\n                                className=\"shili\"\n                                placement=\"right\"\n                                content={(\n                                    <div>\n                                        <p>示例：</p>\n                                        <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                    </div>\n                                )}\n                                trigger=\"click\"\n\n                            >\n                                <span>查看示例</span>\n                            </Popover>\n\n\n                        </Form.Item>\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            ><Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n                {/* 编辑弹窗 */}\n                <EditMail\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy={this.state.isCopy}\n                />\n            </div>\n\n        )\n    }\n    getRefresh() {\n        let that = this;\n        apis.getMailbox({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n\n\n                    },\n                    initValue: '',\n                    filter_fields: res.data.filter_fields,\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onFinish = () => {\n        // console.log(111)\n        console.log(this.formRef.current.getFieldValue('variable'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                console.log(this.state.path)\n                apis.createMailModal({\n                    ...val,\n                    content: {\n                        content: this.state.initValue.toHTML(),\n                        sub_type: 'html',\n                        subject: this.state.titleValue\n                    },\n                    title: this.state.titleValue,\n                    content_format: \"html\",\n                    path: this.state.path,\n                    variable: this.formRef.current.getFieldValue('variable')\n                    // title:subject\n                })\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteMailbox(obj.id).then(res => {\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy = (e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: true\n        });\n        console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id, data) => {\n        console.log(\"okk\", data)\n\n        apis.editMail(id, {\n            content: {\n                content: data.editorValue,\n                sub_type: 'html',\n                subject: data.title\n            },\n            title: data.title,\n            content_format: \"html\",\n            path: data.path,\n            variable: data.variable\n\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id, data) => {\n        console.log(\"okk\", data)\n\n        apis.createMailModal({\n            content: {\n                content: data.editorValue,\n                sub_type: 'html',\n                subject: data.title\n            },\n            title: data.title,\n            content_format: \"html\",\n            path: data.path,\n            variable: data.variable\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n}","import React, { Component } from \"react\";\nimport apis from \"../../../utils/api/unsplash/index\";\n\nimport { Form, Input, Select, Space, Modal, Radio, message, Popover, Cascader, Col, Row } from \"antd\";\nimport { MinusCircleOutlined} from \"@ant-design/icons\";\n\nconst {TextArea} = Input\n\nexport default class EditSMS extends Component {\n    state = {\n\n\n    }\n\n    editFormRef = React.createRef();\n\n    onEditorChange = (val) => {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = val.target.value.match(regex);\n        \n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.editFormRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.editFormRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n\n    // componentDidMount(){\n    //     if(this.editFormRef.current){\n    //         this.editFormRef.current.setFieldsValue({\n    //             ...this.props.currentRowData,\n    //             content: this.props.currentRowData.content.content\n    //         })\n    //     }\n    // }\n\n    // componentWillReceiveProps(nextProps){\n    //     console.log(nextProps,this.editFormRef)\n    //     debugger\n    //     if(this.editFormRef.current){\n    //         this.editFormRef.current.setFieldsValue({\n    //             ...nextProps.currentRowData,\n    //             content: nextProps.currentRowData.content.content\n    //         })\n    //     }\n    // }\n\n    render() {\n        const {\n            visible,\n            currentRowData,\n            isCopy,\n            isSMS,\n        } = this.props;\n\n\n        const { Option } = Select;\n\n        // const { getFieldDecorator } = form;\n        const formItemLayout = {\n            labelCol: {\n                sm: { span: 4 },\n            },\n            wrapperCol: {\n                sm: { span: 16 },\n            },\n        };\n        let formdata = {...currentRowData}\n        formdata = {\n            ...formdata,\n            content: Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.content : ''\n        }\n        return (\n            <Modal\n                title={isCopy ? '复制' : '编辑'}\n                visible={visible}\n                onCancel={this.handleCancel}\n                onOk={this.handleOk}\n                okText={isCopy ? '创建' : '更新'}\n                cancelText=\"取消\"\n                maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                width=\"50%\"\n                destroyOnClose={true}\n            >\n\n                <Form\n                    className=\"addModel\"\n                    name=\"basic\"\n                    labelCol={{ span: 4 }}\n                    initialValues={formdata}\n                    ref={this.editFormRef}\n                >\n                    <Form.Item\n                        label={isSMS ? \"短信标题\" :\"待办标题\"}\n                        name=\"title\"\n                        rules={[{required: true}]}\n                    >\n                        <Input\n                            style={{ width: 463, height: 40 }}\n                            placeholder=\"请输入模板名称\" />\n                    </Form.Item>\n\n\n                    <Form.Item\n                        label={isSMS ? \"短信正文\" :\"待办事项\"}\n                        name=\"content\"\n                        rules={[{required: true}]}\n                    >\n                        <TextArea\n                            placeholder={isSMS ? \"请输入短信正文\" :\"请输入待办事项\"}\n                            onChange={this.onEditorChange}\n                            style={{ width: 463, height: 250 }}\n                        />\n                    </Form.Item>\n                    <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                </Form>\n                <Row>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                        <Popover\n                            className=\"shili\"\n                            style\n                            placement=\"right\"\n                            content={(\n                                <div>\n                                    <p>示例：</p>\n                                    <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                </div>\n                            )}\n                            trigger=\"click\"\n\n                        >\n                            <span>查看示例</span>\n                        </Popover>\n\n                    </Col>\n                </Row>\n\n\n\n\n\n            </Modal>\n\n\n\n        );\n\n    }\n\n    handleCancel = () => {\n        const { onCancel } = this.props\n\n        this.editFormRef.current.resetFields();\n        onCancel();\n    }\n\n    handleOk = () => {\n        const { item = {}, onOk } = this.props\n        const {id} = this.props.currentRowData\n\n        this.editFormRef.current.validateFields()\n            .then(values => {\n                // console.log(values);\n                const data = {\n                    ...values,\n                }\n                onOk(id,data)\n            }\n            )\n            .catch(errorInfo => {\n                console.log(errorInfo)\n            })\n    }\n}\n\n\n\n\n","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Tooltip, message, Row, Col, Popover,Space } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PlusCircleOutlined, MinusCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './mailbox.scss';\nimport 'braft-editor/dist/index.css';\nimport BraftEditor from \"braft-editor\";\n// import TextArea from \"antd/lib/input/TextArea\";\nimport EditSMS from \"./forms/editSMS\"\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\n\n\n\nexport default class SMS extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true\n        },\n\n        visible: false,\n        deleteVisible: false,\n        titleValue: '',\n        initValue: '',\n        fileList: [],\n        file: null,\n        path: '',\n\n        editVisible: false,\n        currentRowData: '',\n        isCopy:false,\n        \n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n\n    componentDidMount() {\n        // console.log(\"121\")\n        apis.getSMS({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if(this.state.filter_fields.length !== 0){\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if(Object.keys(this.state.searchArr).length === 0){\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n    searchInput = []\n   \n    getColumnSearchProps = (dataIndex,title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for(let key in arr){\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for(let i in searchDataBefore){\n            if(searchDataBefore[i]){\n            this.state.searchData[i] = searchDataBefore[i]\n            }\n          }\n        console.log(this.state.searchData);\n        this.getRefresh();       \n    }\n   \n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content) => {\n                return <div>\n                        <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                        </div>;\n            },\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n\n\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n\n    onEditorChange = (val) => {\n        console.log(this.formRef.current.getFieldValue())\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = val.target.value.match(regex);\n        \n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            // if(addRes.length === 0){\n            //     addRes.push({\n            //         name: res[i],\n            //     })\n            // }else{\n            //     for (let i = 0; i < addRes.length; i++) {\n            //         if(res.indexOf(addRes[i]['name']) === -1){\n            //             addRes.push({\n            //                 name: res[i],\n            //             })\n            //         }\n            //     }\n            // }\n            let val = addRes.map(ele=>ele.name)\n            // console.log(val)\n            //Set是一种新的数据结构，它可以接收一个数组或者是类数组对象，自动去重其中的重复项目。\n            //得到的结果，是一个对象，并不是数组，可以使用Array.from()，它可以把类数组对象、可迭代对象转化为数组：\n            res = Array.from(new Set(res))\n            for (let i = 0; i < res.length; i++) {\n            //     let index = val.indexOf(res[i])\n            //     // console.log(index, res[i])\n            //     if(index === -1){\n                    addRes.push({\n                        name: res[i],\n                    })\n            //     }else{\n            //         val.splice(index, 1)\n            //     }\n            }\n\n            //判断这个name是否被删除\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes })\n        }\n        // console.log(addRes);\n\n        this.setState({\n            initValue: val.target.value\n        })\n    }\n\n\n\n    formRef = React.createRef();\n\n\n\n    render() {\n        const { initValue, titleValue, myKey } = this.state\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined /> 短信模板\n                </Divider>\n\n                 {/* 下方表格 */}\n                 <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建模版\"\n                    width=\"645px\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    bodyStyle={{margin:'10px 10px'}}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    key={myKey}\n                    destroyOnClose={true}\n                >\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n                        <Form.Item\n                            label=\"短信标题\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <Input\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                placeholder=\"请输入模板名称\" />\n                        </Form.Item>\n\n\n                        <Form.Item\n                            label=\"短信正文\"\n                            name=\"content\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!initValue) {\n                                            callback('请输入邮件正文')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <TextArea\n                                value={initValue}\n                                onChange={this.onEditorChange}\n                                placeholder=\"请输入短信正文\"\n                                className=\"sms-text\"\n                                rows=\"10\" cols=\"60\"\n                            />\n                            <br />\n                            <Popover\n                                className=\"shili\"\n                                placement=\"right\"\n                                content={(\n                                    <div>\n                                        <p>示例：</p>\n                                        <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                    </div>\n                                )}\n                                trigger=\"click\"\n\n                            >\n                                <span>查看示例</span>\n                            </Popover>\n\n\n                        </Form.Item>\n\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n\n                {/* 编辑弹窗 */}\n                <EditSMS\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy ={this.state.isCopy}\n                    isSMS = {true}\n                />\n\n            </div>\n\n        )\n    }\n    getRefresh() {\n        let that = this;\n        apis.getSMS({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    },\n                    initValue: '',\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n            myKey: Math.random()\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onFinish = () => {\n        // console.log(this.state.initValue, this.state.initValue.toHTML())\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                console.log(this.state.path)\n                apis.createSMS({\n                    ...val,\n                    content: {\n                        content: this.state.initValue,\n                    },\n                    title: this.state.titleValue,\n                    content_format: \"text\",\n                    variable:this.formRef.current.getFieldValue('variable')\n                })\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteSMS(obj.id).then(res => {\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy =(e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:true\n        });\n        console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id,data) => {\n        // console.log(\"okk\", data)\n\n        apis.editSMS(id,{\n            content: {\n                content: data.content,\n            },\n            title: data.title,\n            content_format: \"text\",\n            variable:data.variable\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id,data) => {\n        console.log(\"okk\", data)\n\n        apis.createSMS({\n            content: {\n                content: data.content,\n            },\n            title: data.title,\n            content_format: \"text\",\n            variable:data.variable\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n}\n","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Tooltip, message, Row, Col, Popover,Space } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PlusCircleOutlined, MinusCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './mailbox.scss';\nimport 'braft-editor/dist/index.css';\nimport BraftEditor from \"braft-editor\";\n// import TextArea from \"antd/lib/input/TextArea\";\nimport EditSMS from \"./forms/editSMS\"\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\n\n\n\nexport default class SMS extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true\n        },\n\n        visible: false,\n        deleteVisible: false,\n        titleValue: '',\n        initValue: '',\n        fileList: [],\n        file: null,\n        path: '',\n\n        editVisible: false,\n        currentRowData: '',\n        isCopy:false,\n        \n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n\n    componentDidMount() {\n        // console.log(\"121\")\n        apis.getDingRecord({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if(this.state.filter_fields.length !== 0){\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if(Object.keys(this.state.searchArr).length === 0){\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n    searchInput = []\n   \n    getColumnSearchProps = (dataIndex,title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for(let key in arr){\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for(let i in searchDataBefore){\n            if(searchDataBefore[i]){\n            this.state.searchData[i] = searchDataBefore[i]\n            }\n          }\n        console.log(this.state.searchData);\n        this.getRefresh();       \n    }\n   \n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content) => {\n                return <div>\n                        <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                        </div>;\n            },\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n\n\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n\n    onEditorChange = (val) => {\n        console.log(this.formRef.current.getFieldValue())\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = val.target.value.match(regex);\n        \n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            // if(addRes.length === 0){\n            //     addRes.push({\n            //         name: res[i],\n            //     })\n            // }else{\n            //     for (let i = 0; i < addRes.length; i++) {\n            //         if(res.indexOf(addRes[i]['name']) === -1){\n            //             addRes.push({\n            //                 name: res[i],\n            //             })\n            //         }\n            //     }\n            // }\n            let val = addRes.map(ele=>ele.name)\n            // console.log(val)\n            //Set是一种新的数据结构，它可以接收一个数组或者是类数组对象，自动去重其中的重复项目。\n            //得到的结果，是一个对象，并不是数组，可以使用Array.from()，它可以把类数组对象、可迭代对象转化为数组：\n            res = Array.from(new Set(res))\n            for (let i = 0; i < res.length; i++) {\n            //     let index = val.indexOf(res[i])\n            //     // console.log(index, res[i])\n            //     if(index === -1){\n                    addRes.push({\n                        name: res[i],\n                    })\n            //     }else{\n            //         val.splice(index, 1)\n            //     }\n            }\n\n            //判断这个name是否被删除\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes })\n        }\n        // console.log(addRes);\n\n        this.setState({\n            initValue: val.target.value\n        })\n    }\n\n\n\n    formRef = React.createRef();\n\n\n\n    render() {\n        const { initValue, titleValue, myKey } = this.state\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined /> 待办模板\n                </Divider>\n\n                 {/* 下方表格 */}\n                 <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建模版\"\n                    width=\"645px\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    bodyStyle={{margin:'10px 10px'}}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    key={myKey}\n                    destroyOnClose={true}\n                >\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n                        <Form.Item\n                            label=\"待办标题\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <Input\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                placeholder=\"请输入模板名称\" />\n                        </Form.Item>\n\n\n                        <Form.Item\n                            label=\"待办事项\"\n                            name=\"content\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!initValue) {\n                                            callback('请输入邮件正文')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <TextArea\n                                value={initValue}\n                                onChange={this.onEditorChange}\n                                placeholder=\"请输入待办事项\"\n                                className=\"sms-text\"\n                                rows=\"10\" cols=\"60\"\n                            />\n                            <br />\n                            <Popover\n                                className=\"shili\"\n                                placement=\"right\"\n                                content={(\n                                    <div>\n                                        <p>示例：</p>\n                                        <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                    </div>\n                                )}\n                                trigger=\"click\"\n\n                            >\n                                <span>查看示例</span>\n                            </Popover>\n\n\n                        </Form.Item>\n\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n\n                {/* 编辑弹窗 */}\n                <EditSMS\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy ={this.state.isCopy}\n                    isSMS ={false}\n                />\n\n            </div>\n\n        )\n    }\n    getRefresh() {\n        let that = this;\n        apis.getDingRecord({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    },\n                    initValue: '',\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n            myKey: Math.random()\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onFinish = () => {\n        // console.log(this.state.initValue, this.state.initValue.toHTML())\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                console.log(val)\n                apis.createDingRecord({\n                    ...val,\n                    content: {\n                        content: this.state.initValue,\n                    },\n                    // title: this.state.titleValue,\n                    content_format: \"text\",\n                    // variable:this.formRef.current.getFieldValue('variable')\n                })\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteDingRecord(obj.id).then(res => {\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy =(e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:true\n        });\n        console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id,data) => {\n        // console.log(\"okk\", data)\n\n        apis.editDingRecord(id,{\n            content: {\n                content: data.content,\n            },\n            title: data.title,\n            content_format: \"text\",\n            variable:data.variable\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id,data) => {\n        console.log(\"okk\", data)\n\n        apis.createDingRecord({\n            content: {\n                content: data.content,\n            },\n            title: data.title,\n            content_format: \"text\",\n            variable:data.variable\n        }).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n}\n","import React, { Component } from \"react\";\nimport apis from \"../../../utils/api/unsplash/index\";\n\nimport { Form, Input, Select, Button, Modal, Radio, message, Popover, Space, Col, Row } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\n\n\nconst { TextArea } = Input\n\nexport default class editDing extends Component {\n    state = {\n        MarkdownContent: \"\"\n\n    }\n\n    editFormRef = React.createRef();\n\n    // markdown编辑器\n    editorRef = React.createRef();\n    onMarkdownChange = (source, data) => {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = this.editorRef.current.getInstance().getMarkdown().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        // let addRes = []\n        let addRes = this.editFormRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.editFormRef.current.setFieldsValue({ variable: addRes });\n        }\n\n        this.setState({ MarkdownContent: this.editorRef.current.getInstance().getMarkdown() });\n    }\n\n    onTextareaChange(e) {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.editFormRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.editFormRef.current.setFieldsValue({ variable: addRes });\n        }\n        // console.log(addRes);\n\n    };\n\n    render() {\n        const {\n            visible,\n            currentRowData,\n            isCopy\n        } = this.props;\n\n\n        const { Option } = Select;\n\n        const { content_format } = currentRowData;\n        // const { text, btns} = content;\n        const text = Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.text : '';\n        const btns = Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.btns : ''\n        let formdata = { ...currentRowData }\n        formdata = {\n            ...formdata,\n            content: Object.hasOwnProperty.call(currentRowData, 'content') ? currentRowData.content.content : ''\n        }\n        return (\n            <Modal\n                title={isCopy ? '复制' : '编辑'}\n                visible={visible}\n                onCancel={this.handleCancel}\n                onOk={this.handleOk}\n                okText={isCopy ? '创建' : '更新'}\n                cancelText=\"取消\"\n                maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                width=\"640px\"\n                destroyOnClose={true}\n            >\n\n                <Form\n                    className=\"addModel\"\n                    name=\"basic\"\n                    labelCol={{ span: 4 }}\n                    initialValues={formdata}\n                    ref={this.editFormRef}\n                >\n                    <Form.Item >\n                        <Row>\n                            <Col span={4}></Col>\n                            <Col span={20} className=\"radio-content\">\n                                <Radio.Group disabled defaultValue={content_format}>\n                                    <Radio value=\"text\">文本</Radio>\n                                    <Radio value=\"markdown\">Markdown</Radio>\n                                    <Radio value=\"actionCard\">ActionCard</Radio>\n                                    {/* <Radio value={4}>OD</Radio> */}\n                                </Radio.Group>\n                            </Col>\n                        </Row>\n                    </Form.Item>\n                    <Form.Item\n                        label=\"短信标题\"\n                        name=\"title\"\n                        rules={[{ required: true }]}\n                    >\n                        <Input\n                            style={{ width: 463, height: 40 }}\n                            placeholder=\"请输入模板名称\" />\n                    </Form.Item>\n\n                    {\n                        content_format == \"text\" &&\n                        <Form.Item\n                            label=\"正文\"\n                            name=\"content\"\n                            rules={[{ required: true }]}\n                        >\n                            <TextArea\n                                placeholder=\"请输入正文\"\n                                onChange={this.onTextareaChange.bind(this)}\n                                style={{ width: 463, height: 250 }}\n                            />\n                        </Form.Item>\n                    }\n                    {\n                        content_format == \"markdown\" &&\n                        <Form.Item\n                            label=\"正文\"\n                            name=\"text\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!this.state.MarkdownContent) {\n                                            callback('请输入正文')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n                            ]}\n                        >\n                            <Editor\n                                ref={this.editorRef}\n                                placeholder=\"请输入正文\"\n                                previewStyle=\"vertical\"\n                                height=\"330px\"\n                                initialEditType=\"markdown\"\n                                useCommandShortcut={true}\n                                width=\"463px\"\n                                initialValue={text}\n                                onChange={this.onMarkdownChange}\n                                config={\n                                    {\n                                        markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                            `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                        onload: (editor, func) => {\n                                            let md = editor.getMarkdown();\n                                            let html = editor.getHTML();\n                                            debugger\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Item>\n                    }\n                    {\n                        content_format == \"actionCard\" &&\n                        <>\n                            <Form.List name=\"users\" initialValue={btns}>\n                                {(fields, { add, remove }) => (\n                                    <>\n                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                            <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad addAD-Input-Dad-First\"\n                                                    {...restField}\n                                                    name={[name, 'title']}\n                                                    fieldKey={[fieldKey, 'title']}\n                                                    rules={[{ required: true, message: '请输入按钮名称' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"按钮名称\" />\n                                                </Form.Item>\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad\"\n                                                    {...restField}\n                                                    name={[name, 'actionURL']}\n                                                    fieldKey={[fieldKey, 'actionURL']}\n                                                    rules={[{ required: true, message: '请输入链接url' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"链接url\" />\n                                                </Form.Item>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Space>\n                                        ))}\n                                        <Form.Item>\n                                            <Button type=\"dashed\" className=\"addAD-Button\" onClick={() => add()} block icon={<PlusOutlined />}>\n                                                添加跳转\n                                            </Button>\n                                        </Form.Item>\n                                    </>)}\n                            </Form.List>\n\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"text\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, _value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\"\n                                    initialValue={text}\n\n                                    onChange={this.onMarkdownChange}\n\n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                                `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                            </Form.Item>\n                        </>\n                    }\n                    <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n\n                </Form>\n\n\n\n\n                <Row>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                        <Popover\n                            className=\"shili\"\n                            style\n                            placement=\"right\"\n                            content={(\n                                <div>\n                                    <p>示例：</p>\n                                    <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                </div>\n                            )}\n                            trigger=\"click\"\n\n                        >\n                            <span>查看示例</span>\n                        </Popover>\n\n                    </Col>\n                </Row>\n\n\n\n\n\n            </Modal>\n\n\n\n        );\n\n    }\n\n    handleCancel = () => {\n        const { onCancel } = this.props\n\n        this.editFormRef.current.resetFields();\n        onCancel();\n    }\n\n    handleOk = () => {\n        const { item = {}, onOk, t } = this.props\n        const { id, content_format } = this.props.currentRowData\n\n        this.editFormRef.current.validateFields()\n            .then(values => {\n                console.log(values);\n                const data = {\n                    ...values,\n\n                    MarkdownContent: this.state.MarkdownContent,\n                    content_format: content_format\n                    // btns:this.editFormRef.current.getFieldValue('users')\n                }\n                onOk(id, data)\n            }\n            )\n            .catch(errorInfo => {\n                console.log(errorInfo)\n            })\n    }\n}\n\n\n\n\n","import apis from \"../../utils/api/unsplash/index\";\nimport Highlighter from 'react-highlight-words';\nimport React, { Component, useState } from \"react\";\nimport { Table, Form, Button, Input, Divider, Modal, Tooltip, message, Row, Col, Popover, Radio, Space } from 'antd';\nimport { SearchOutlined, MailOutlined, PlusCircleOutlined, PictureOutlined, CaretDownOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './dingdingRobot.scss';\nimport Markdown from \"../../components/Markdown\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\nimport EditDing from \"./forms/editDing\";\n\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\n\nexport default class DingDingRobot extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: null\n\n        },\n        current: \"\",//目前正在查看的item id\n        visible: false,\n        deleteVisible: false,\n        flowState: 1,\n        textareaValue: '',\n        MarkdownContent: '',\n        titleValue: '',\n        fileList: [],\n        file: null,\n        btnsArray: [],\n        btns: {\n            title: \"\",\n            actionURL: \"\"\n        },\n\n        editVisible: false,\n        currentRowData: '',\n        isCopy: false,\n\n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n    componentDidMount() {\n        apis.getDingRobot({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    }\n\n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content, data) => {\n                if (data.content_format == \"text\") { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                            </div>;\n                } \n                else { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['text']}>{content['text']}</Tooltip>\n                            </div>;\n                }\n            }\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n\n    // // 更新文本框里的值\n    // onEditorChange = (val) => {\n    //     this.setState({\n    //         initValue: val\n    //     })\n    // };\n\n    //设置textareaValue\n    handleTextareaChange(e) {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({\n            textareaValue: e.target.value\n        })\n    };\n\n    onTitleChange(e){\n        // console.log(this.formRef.current.getFieldValue('variable'))s\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        var addRes = this.formRef.current.getFieldValue('variable') || []\n        // console.log('0',addRes)\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            // console.log('4:',addRes)\n            // for(let i = 0; i < val.length; i++){\n            //     let index = -1\n            //     for(let j = 0; j < addRes.length; j++){\n            //         if(val[i] === addRes[j].name) {index = j;}\n            //     }\n            //     if(index !== -1) {addRes.splice(index, 1);}\n            // }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n    onURLChange(e){\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n    formRef = React.createRef();\n\n    controls = ['bold', 'italic', 'underline', 'separator', 'text-color', 'strike-through', 'text-align', 'code'];\n\n    radioChange = (e) => {\n        console.log(e);\n        this.setState({ flowState: e });\n    };\n\n\n\n    //上传附件功能的属性\n    uploadProps = {\n        action: 'http://192.168.41.49/api/v1.0/upload',\n\n        onRemove: (file) => {\n            this.setState(({ fileList }) => {\n                const index = fileList.indexOf(file);\n                // console.log(index)\n                const newFileList = fileList;\n                newFileList.splice(index, 1);\n                this.setState({\n                    fileList: this.newFileList,\n                });\n                return false;\n            });\n        },\n        onChange: (info) => {\n            if (info.file.status !== 'uploading') {\n                console.log(info.file, info.fileList);\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`);\n            }\n        },\n        beforeUpload: (file) => {\n            console.log('beforeUpload:', file)\n            this.state.fileList.push(file)\n            this.setState({\n                file: this.state.file\n            })\n            // return false;\n        },\n        fileList: this.state.fileList,\n    }\n\n    // markdown编辑器\n    editorRef = React.createRef();\n    onMarkdownChange = (source, data) => {\n        // MarkdownContent = this.editorRef.current.getInstance().getMarkdown()\n        //  console.log( this.editorRef.current.getInstance().getMarkdown())\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = this.editorRef.current.getInstance().getMarkdown().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({ MarkdownContent: this.editorRef.current.getInstance().getMarkdown() });\n        // console.log(source, this.editorRef.current.getInstance().getMarkdown())\n    }\n\n    // getMarkdownData = () => {\n    //     console.log(this.editorRef.current.getInstance().getMarkdown(), this.editorRef.current.getInstance().getHtml())\n    // }\n\n\n    render() {\n        // const uploadProps = {\n        //     action: '',\n\n        // }\n        const { textareaValue, titleValue, initValue } = this.state\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined /> 钉钉机器人\n                </Divider>\n\n                {/* 下方表格 */}\n                <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建模版\"\n                    width=\"645px\"\n                    bodyStyle={{margin:'10px 10px'}}\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    destroyOnClose={true}\n\n                >\n\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n                        <Form.Item>\n                            <Row>\n                                <Col span={4}></Col>\n                                <Col span={20} className=\"radio-content\">\n                                    <Radio.Group defaultValue={1}\n                                        onChange={e => this.radioChange(e.target.value)}\n                                    >\n                                        <Radio value={1}>文本</Radio>\n                                        <Radio value={2}>Markdown</Radio>\n                                        <Radio value={3}>ActionCard</Radio>\n                                        {/* <Radio value={4}>OD</Radio> */}\n                                    </Radio.Group>\n                                </Col>\n                            </Row>\n                        </Form.Item>\n\n                        {/* 标题栏 */}\n                        <Form.Item\n                            label=\"标题名称\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"默认为模板名称\"\n                                className=\"input-pos\"\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                            />\n                        </Form.Item>\n\n                        {/* 添加附件 */}\n                        {/* {(this.state.flowState == '2' || this.state.flowState == '3') &&\n                            <Form.Item  style={{marginLeft:100}} >\n                                <Upload {...this.uploadProps}>\n                                    <LinkOutlined style={{ fontSize: '13px', color: '#000000' }} />添加附件｜<CaretDownOutlined />\n                                </Upload>\n                            </Form.Item>\n                        } */}\n\n                        {\n                            this.state.flowState == '1' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info1\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            // console.log(textareaValue);\n                                            if (!textareaValue) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <TextArea\n                                    value={textareaValue}\n                                    rows={4}\n                                    placeholder=\"请输入正文\"\n                                    onChange={this.handleTextareaChange.bind(this)}\n                                    style={{ width: '461px' ,height: '260px',borderRadius:' 5px '}}  \n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )}\n                                    trigger=\"click\"\n                                >\n                                    <div>查看示例</div>\n                                </Popover>\n                            </Form.Item>\n                        }\n\n                        {\n                            this.state.flowState == '2' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info2\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\"\n                                    onChange={this.onMarkdownChange}\n\n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                                `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )}\n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.List name=\"users\">\n                                {(fields, { add, remove }) => (\n                                    <>\n                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                            <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad addAD-Input-Dad-First\"\n                                                    {...restField}\n                                                    name={[name, 'title']}\n                                                    fieldKey={[fieldKey, 'title']}\n                                                    rules={[{ required: true, message: '请输入按钮名称' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"按钮名称\" onChange ={this.onTitleChange.bind(this)}/>\n                                                </Form.Item>\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad\"\n                                                    {...restField}\n                                                    name={[name, 'actionURL']}\n                                                    fieldKey={[fieldKey, 'actionURL']}\n                                                    rules={[{ required: true, message: '请输入链接url' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"链接url\"  onChange ={this.onURLChange.bind(this)}/>\n                                                </Form.Item>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Space>\n                                        ))}\n                                        <Form.Item>\n                                            <Button type=\"dashed\" className=\"addAD-Button\" onClick={() => add()} block icon={<PlusOutlined />}>\n                                                添加跳转\n                                    </Button>\n                                        </Form.Item>\n                                    </>\n                                )}\n                            </Form.List>\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info3\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, _value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\"\n                                    onChange={this.onMarkdownChange}\n\n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                                `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )\n                                    }\n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n                        }\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n\n                {/* 编辑弹窗 */}\n                <EditDing\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy={this.state.isCopy}\n                />\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getDingRobot({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    }\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                // console.log(this.state.flowState)\n                let data = {\n                    variable:this.formRef.current.getFieldValue('variable')\n                }\n                let type = ['text', 'markdown', 'actionCard']\n                data['content_format'] = type[parseInt(this.state.flowState) - 1]\n                if (this.state.flowState === 1) {\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            content: this.state.textareaValue,\n                        },\n                    }\n                } else if (this.state.flowState === 2) {\n                    console.log(this.state.MarkdownContent)\n                    // let path = {\n                    //     file: [],\n                    //     photo: []\n                    // }\n\n                    // this.state.file.forEach(ele => {\n                    //     path.file.push(ele.path)\n                    // })\n                    // this.state.photo.forEach(ele => {\n                    //     path.photo.push(ele.path)\n                    // })\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            text: this.state.MarkdownContent,\n                            title: this.state.titleValue,\n                        },\n                        path: null\n                    }\n                } else if (this.state.flowState === 3) {\n\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            title: this.state.titleValue,\n                            text: this.state.MarkdownContent,\n                            btnOrientation: \"0\",\n                            btns: this.formRef.current.getFieldValue('users')\n                        },\n                        path: null,\n                        style: 'ding_robot'\n                    }\n                }\n                apis.createDingRobot(data)\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteDingRobot(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy = (e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: true\n        });\n        // console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id, data) => {\n        // console.log(\"okk\", data.content_format===\"text\")\n        let val = {\n            variable:data.variable,\n            title: data.title,\n        }\n        switch (data.content_format) {\n            case \"text\":\n                val = {\n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format: \"text\",\n                    style: 'ding_robot'\n                };\n                break;\n            case \"markdown\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title\n                    },\n                    content_format: \"markdown\",\n                    style: 'ding_robot'\n                };\n                break;\n            case \"actionCard\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title,\n                        btnOrientation: \"0\",\n                        btns: data.users\n\n                    },\n                    content_format: \"actionCard\",\n                    style: 'ding_robot'\n                };\n                break;\n        }\n        // console.log(val)\n        apis.editDingRobot(id, val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id, data) => {\n        // console.log(\"okk\", data)\n        let val = {\n            variable:data.variable,\n            title: data.title,\n        }\n        switch (data.content_format) {\n            case \"text\":\n                val = {\n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format: \"text\",\n                    style: 'ding_robot'\n                };\n                break;\n            case \"markdown\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title\n                    },\n                    content_format: \"markdown\",\n                    style: 'ding_robot'\n                };\n                break;\n            case \"actionCard\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title,\n                        btnOrientation: \"0\",\n                        btns: data.users\n\n                    },\n                    content_format: \"actionCard\",\n                    style: 'ding_robot'\n                };\n                break;\n        }\n\n        apis.createDingRobot(val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n\n\n}","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component, useState } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Tooltip, message, Row, Col, Popover, Radio, Space } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PictureOutlined, PlusCircleOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './dingdingRobot.scss';\nimport Markdown from \"../../components/Markdown\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\nimport EditDing from \"./forms/editDing\";\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\n\nexport default class DingDingRobot extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal:null\n\n        },\n        current: \"\",//目前正在查看的item id\n        visible: false,\n        deleteVisible: false,\n        flowState: 1,\n        textareaValue: '',\n        MarkdownContent:'',\n        titleValue: '',\n        fileList: [],\n        file: null,\n        btnsArray:[],\n        btns:{\n            title:\"\",\n            actionURL:\"\"\n        },\n\n        editVisible: false,\n        currentRowData: '',\n        isCopy:false, \n        \n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n    componentDidMount() {\n        apis.getDingGroup({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal:(total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    };\n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content, data) => {\n                if (data.content_format == \"text\") { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                            </div>;\n                } \n                else { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['text']}>{content['text']}</Tooltip>\n                            </div>;\n                }\n            }\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n\n    // 更新文本框里的值\n    onEditorChange = (val) => {\n        this.setState({\n            initValue: val\n        })\n    };\n\n    //设置textareaValue\n    handleTextareaChange(e) {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n        \n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({\n            textareaValue: e.target.value\n        })\n    };\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n    formRef = React.createRef();\n\n    controls = ['bold', 'italic', 'underline', 'separator', 'text-color', 'strike-through', 'text-align', 'code'];\n\n    radioChange = (e) => {\n        console.log(e);\n        this.setState({ flowState: e });\n    };\n\n   \n\n    //上传附件功能的属性\n    uploadProps = {\n        action: 'http://192.168.41.49/api/v1.0/upload',\n        \n        onRemove: (file) => {\n            this.setState(({ fileList }) => {\n                const index = fileList.indexOf(file);\n                // console.log(index)\n                const newFileList = fileList;\n                newFileList.splice(index, 1);\n                this.setState({\n                    fileList: this.newFileList,\n                });\n                return false;\n            });\n        },\n        onChange: (info) => {\n            if (info.file.status !== 'uploading') {\n                console.log(info.file, info.fileList);\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`);\n            }\n        },\n        beforeUpload: (file) => {\n            console.log('beforeUpload:', file)\n            this.state.fileList.push(file)\n            this.setState({\n                file: this.state.file\n            })\n            // return false;\n        },\n        fileList: this.state.fileList,\n    }\n\n\n    onTitleChange(e){\n        // console.log(this.formRef.current.getFieldValue('variable'))s\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        var addRes = this.formRef.current.getFieldValue('variable') || []\n        // console.log('0',addRes)\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            // console.log('4:',addRes)\n            // for(let i = 0; i < val.length; i++){\n            //     let index = -1\n            //     for(let j = 0; j < addRes.length; j++){\n            //         if(val[i] === addRes[j].name) {index = j;}\n            //     }\n            //     if(index !== -1) {addRes.splice(index, 1);}\n            // }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n    onURLChange(e){\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n    // markdown编辑器\n    editorRef = React.createRef();\n    onMarkdownChange = (source, data) =>{\n        let regex = /\\{{(.+?)\\}}/g;\n        let option =  this.editorRef.current.getInstance().getMarkdown().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({ MarkdownContent: this.editorRef.current.getInstance().getMarkdown()});\n        // console.log(source, this.editorRef.current.getInstance().getMarkdown())\n    }\n\n\n    render() {\n\n        const { textareaValue, titleValue, initValue } = this.state\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined />  钉钉群通知\n                </Divider>\n\n                 {/*新建按钮*/}\n                {/* <div height=\"30px\" width=\"100%\"  >\n                    <Button className=\"new-button\" type=\"primary\" onClick={this.showModal} htmlType=\"submit\">\n                        新建模板\n                    </Button>\n                </div> */}\n\n                {/* <Table\n                    columns={this.columns}\n                    dataSource={this.state.dataSource}\n                    pagination={this.state.pagination}\n                    scroll={{ y: 'calc(100vh - 280px)' }}\n                /> */}\n\n                {/* 下方表格 */}\n                <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n                {/* 新建模板弹出框 */}\n                <Modal\n                    width=\"645px\"\n                    bodyStyle={{margin:'10px 10px'}}\n                    title=\"新建模版\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    destroyOnClose={true}\n                >\n\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n                        <Form.Item>\n                            <Row>\n                                <Col span={4}></Col>\n                                <Col span={20} className=\"radio-content\">\n                                    <Radio.Group defaultValue={1}\n                                        onChange={e => this.radioChange(e.target.value)}\n                                    >\n                                        <Radio value={1}>文本</Radio>\n                                        <Radio value={2}>Markdown</Radio>\n                                        <Radio value={3}>ActionCard</Radio>\n                                        {/* <Radio value={4}>OD</Radio> */}\n                                    </Radio.Group>\n                                </Col>\n                            </Row>\n                        </Form.Item>\n\n                        {/* 标题栏 */}\n                        <Form.Item\n                            label=\"标题名称\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"默认为模板名称\"\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                            />\n                        </Form.Item>\n\n                        {/* 添加附件 */}\n                        {/* {(this.state.flowState == '2' || this.state.flowState == '3') &&\n                            <Form.Item  style={{marginLeft:100}} >\n                                <Upload {...this.uploadProps}>\n                                    <LinkOutlined style={{ fontSize: '13px', color: '#000000' }} />添加附件｜<CaretDownOutlined />\n                                </Upload>\n                            </Form.Item>\n                        } */}\n\n                        {\n                            this.state.flowState == '1' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info1\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            // console.log(textareaValue);\n                                            if (!textareaValue) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <TextArea \n                                    value={textareaValue}\n                                    rows={4}\n                                    placeholder=\"请输入正文\"\n                                    onChange={this.handleTextareaChange.bind(this)}\n                                    style={{ width: '461px' ,height: '260px',borderRadius:' 5px '}}  \n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={ (\n                                                <div>\n                                                <p>示例：</p>\n                                                <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                                </div>\n                                            )} \n                                    trigger=\"click\"\n                                >\n                                    <div>查看示例</div>\n                                </Popover>\n                            </Form.Item>\n                        }\n\n                        {\n                            this.state.flowState == '2' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info2\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\" \n                                    onChange={this.onMarkdownChange}\n                                    \n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                            `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={ (\n                                                <div>\n                                                <p>示例：</p>\n                                                <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                                </div>\n                                            )} \n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.List name=\"users\">\n                                {(fields, { add, remove }) => (\n                                    <>\n                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                            <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad addAD-Input-Dad-First\"\n                                                    {...restField}\n                                                    name={[name, 'title']}\n                                                    fieldKey={[fieldKey, 'title']}\n                                                    rules={[{ required: true, message: '请输入按钮名称' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"按钮名称\" onChange ={this.onTitleChange.bind(this)}/>\n                                                </Form.Item>\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad\"\n                                                    {...restField}\n                                                    name={[name, 'actionURL']}\n                                                    fieldKey={[fieldKey, 'actionURL']}\n                                                    rules={[{ required: true, message: '请输入链接url' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"链接url\" onChange ={this.onURLChange.bind(this)}/>\n                                                </Form.Item>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Space>\n                                        ))}\n                                        <Form.Item>\n                                            <Button type=\"dashed\" className=\"addAD-Button\" onClick={() => add()} block icon={<PlusOutlined />}>\n                                                添加跳转\n                                    </Button>\n                                        </Form.Item>\n                                    </>\n                                )}\n                            </Form.List>\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info3\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, _value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\" \n                                    onChange={this.onMarkdownChange}\n                                    \n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                            `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                                <div>\n                                                <p>示例：</p>\n                                                <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                                </div>\n                                            )\n                                            } \n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n                        }\n\n\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n\n                 {/* 编辑弹窗 */}\n              <EditDing\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy ={this.state.isCopy}\n                />\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getDingGroup({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    }\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                // console.log(this.state.flowState)\n                let data = {\n                    variable:this.formRef.current.getFieldValue('variable')\n                }\n                let type = ['text', 'markdown', 'actionCard']\n                data['content_format'] = type[parseInt(this.state.flowState) - 1]\n                if (this.state.flowState === 1) {\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            content: this.state.textareaValue,\n                        },\n                    }\n                } else if (this.state.flowState === 2) {\n                    console.log(this.state.MarkdownContent)\n                    // let path = {\n                    //     file: [],\n                    //     photo: []\n                    // }\n\n                    // this.state.file.forEach(ele => {\n                    //     path.file.push(ele.path)\n                    // })\n                    // this.state.photo.forEach(ele => {\n                    //     path.photo.push(ele.path)\n                    // })\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            text: this.state.MarkdownContent,\n                            title:this.state.titleValue,\n                        },\n                        path:null\n                    }\n                } else if (this.state.flowState === 3) {\n                    \n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            title: this.state.titleValue,\n                            text: this.state.MarkdownContent,\n                            btnOrientation:\"0\",\n                            btns:this.formRef.current.getFieldValue('users')\n                        },\n                        path:null,\n                        // style:'ding_robot'\n                    }\n                }\n                apis.createDingGroup(data)\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {        \n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteDingGroup(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy =(e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy:true\n        });\n        // console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id,data) => {\n        // console.log(\"okk\", data.content_format===\"text\")\n        let val ={\n            variable:data.variable,\n            title: data.title,\n        }\n        switch(data.content_format){\n            case \"text\":\n                val = {   \n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format:\"text\",\n                };\n                break;\n            case \"markdown\":\n                val = {   \n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title:data.title\n                    },\n                    content_format:\"markdown\",\n                };\n                break;\n            case \"actionCard\":\n                val = {   \n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title:data.title,\n                        btnOrientation:\"0\",\n                        btns:data.users\n\n                    },\n                    content_format:\"actionCard\",\n                    style:'ding_robot'\n                };\n                break;\n        }\n        // console.log(val)\n        apis.editDingGroup(id,val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id,data) => {\n        // console.log(\"okk\", data)\n        let val ={\n            variable:data.variable,\n            title: data.title,\n        }\n        switch(data.content_format){\n            case \"text\":\n                val = {   \n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format:\"text\",\n                };\n                break;\n            case \"markdown\":\n                val = {   \n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title:data.title\n                    },\n                    content_format:\"markdown\",\n                };\n                break;\n            case \"actionCard\":\n                val = {   \n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title:data.title,\n                        btnOrientation:\"0\",\n                        btns:data.users\n\n                    },\n                    content_format:\"actionCard\",\n                    style:'ding_robot'\n                };\n                break;\n        }\n\n        apis.createDingGroup(val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n}","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component, useState } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Tooltip, message, Row, Col, Popover, Radio, Space } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PictureOutlined, PlusCircleOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './dingdingRobot.scss';\nimport Markdown from \"../../components/Markdown\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\nimport EditDing from \"./forms/editDing\";\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\n\nexport default class dingdingNotice extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: null\n\n        },\n        current: \"\",//目前正在查看的item id\n        visible: false,\n        deleteVisible: false,\n        flowState: 1,\n        textareaValue: '',\n        MarkdownContent: '',\n        titleValue: '',\n        fileList: [],\n        file: null,\n        btnsArray: [],\n        btns: {\n            title: \"\",\n            actionURL: \"\"\n        },\n\n        editVisible: false,\n        currentRowData: '',\n        isCopy: false,\n\n        filter_fields: [],\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {}\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n    componentDidMount() {\n        apis.getDingNotice({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ width:' 200px',height: '97px',padding: 8,boxShadow :' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius:'5px'}}>\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{color:'#B1B1B1',fontSize:'12px'}} />}\n                    placeholder={`搜索 ${title}`}\n                    value={selectedKeys[0]}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8,marginTop: 5 }}\n                />\n                <Space>\n                    <Button \n                        onClick={(e) => this.handleReset(e, dataIndex)} \n                        size=\"small\" \n                        style={{ width: '67px',height:'21px' ,background:'##FFFFFF',border:'1px solid #DADADA',borderRadius:'5px' ,fontSize:'12px',margin:'12px'}}\n                    >\n                        重置\n                    </Button>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => this.search()}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: '67px',height:'21px' ,background:'#40404C',border:'1px solid #40404C',borderRadius:'5px' ,fontSize:'12px',color: '#FFFFFF'}}\n                    >\n                        搜索\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n\n\n        render: text => {\n\n            if (this.state.searchedColumn === dataIndex) {\n                return <>\n                    <Highlighter\n                        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                        searchWords={[this.state.searchData[dataIndex]]}\n                        autoEscape\n                        textToHighlight={text ? text.toString() : ''}\n                    />\n                </>\n            } else { return <>{text}</> }\n\n        }\n\n    });\n\n    handleSearch = (e, dataIndex) => {\n        this.state.searchArr[dataIndex] = [e.target.value]\n        this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    }\n\n\n    handleReset = (e, dataIndex) => {\n        this.searchInput[dataIndex].handleReset(e);\n        this.state.searchData[dataIndex] = [];\n        this.search();\n    };\n\n    //每列名称\n    columns = [\n        {\n            title: \"模版ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n        {\n            title: \"标题\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"标题\"),\n        },\n        {\n            title: \"正文\",\n            key: \"content\",\n            dataIndex: \"content\",\n            align: \"center\",\n            textWrap: 'word-break',\n            ellipsis: true,\n            render: (content, data) => {\n                if (data.content_format == \"text\") { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['content']}>{content['content']}</Tooltip>\n                            </div>;\n                } \n                else { \n                    return <div>\n                            <Tooltip placement=\"topLeft\" title={content['text']}>{content['text']}</Tooltip>\n                            </div>;\n                }\n            }\n        },\n        {\n            title: \"更新时间\",\n            dataIndex: \"updated_at\",\n            key: \"updated_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleCopy(e, obj)}>复制</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n\n    // 更新文本框里的值\n    onEditorChange = (val) => {\n        this.setState({\n            initValue: val\n        })\n    };\n\n    //设置textareaValue\n    handleTextareaChange(e) {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            for (let i = 0; i < res.length; i++) {\n                addRes.push({name: res[i]})\n            }\n            for(let i = 0; i < val.length; i++){\n                let index = -1\n                for(let j = 0; j < addRes.length; j++){\n                    if(val[i] === addRes[j].name) index = j;\n                }\n                if(index !== -1) addRes.splice(index, 1)\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({\n            textareaValue: e.target.value\n        })\n    };\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n    formRef = React.createRef();\n\n    controls = ['bold', 'italic', 'underline', 'separator', 'text-color', 'strike-through', 'text-align', 'code'];\n\n    radioChange = (e) => {\n        console.log(e);\n        this.setState({ flowState: e });\n    };\n\n    // beforeUpload = (file, fileList, type) => {\n    //     if(type === 'file'){\n    //         let data = {\n    //             path: 'http://xxx',\n    //             name: '12331'\n    //         }\n    //         this.state.file.push(data)\n    //         this.setState({\n    //             file: this.state.file\n    //         })\n    //     }else if(type === 'photo'){\n    //         let data = {\n    //             path: 'http://xxx',\n    //             name: '12331'\n    //         }\n    //         this.state.photo.push(data)\n    //         this.setState({\n    //             photo: this.state.photo\n    //         })\n    //     }\n    //     return false;\n    // };\n\n    //上传附件功能的属性\n    uploadProps = {\n        action: 'http://192.168.41.49/api/v1.0/upload',\n\n        onRemove: (file) => {\n            this.setState(({ fileList }) => {\n                const index = fileList.indexOf(file);\n                // console.log(index)\n                const newFileList = fileList;\n                newFileList.splice(index, 1);\n                this.setState({\n                    fileList: this.newFileList,\n                });\n                return false;\n            });\n        },\n        onChange: (info) => {\n            if (info.file.status !== 'uploading') {\n                console.log(info.file, info.fileList);\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`);\n            }\n        },\n        beforeUpload: (file) => {\n            console.log('beforeUpload:', file)\n            this.state.fileList.push(file)\n            this.setState({\n                file: this.state.file\n            })\n            // return false;\n        },\n        fileList: this.state.fileList,\n    }\n\n    onTitleChange(e){\n        // console.log(this.formRef.current.getFieldValue('variable'))s\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        var addRes = this.formRef.current.getFieldValue('variable') || []\n        // console.log('0',addRes)\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            // console.log('4:',addRes)\n            // for(let i = 0; i < val.length; i++){\n            //     let index = -1\n            //     for(let j = 0; j < addRes.length; j++){\n            //         if(val[i] === addRes[j].name) {index = j;}\n            //     }\n            //     if(index !== -1) {addRes.splice(index, 1);}\n            // }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n    onURLChange(e){\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = e.target.value.match(regex);\n\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n    }\n\n    // markdown编辑器\n    editorRef = React.createRef();\n    onMarkdownChange = (source, data) => {\n        let regex = /\\{{(.+?)\\}}/g;\n        let option = this.editorRef.current.getInstance().getMarkdown().match(regex);\n        let res = []\n        if (option) {\n            res = option.map((item) => item.length ? item.substring(2, item.length - 2) : null);\n        }\n        let addRes = this.formRef.current.getFieldValue('variable') || []\n        if (res.length!=0) {\n            let val = addRes.map(ele=>ele.name);\n            res = Array.from(new Set(res));\n            outer:for (let i = 0; i < res.length; i++) {\n                for(let j = 0; j < val.length; j++){\n                    if(val[j] == res[i]){\n                        continue outer;\n                    }\n                }\n                addRes.push({name: res[i]})\n            }\n            this.formRef.current.setFieldsValue({ variable: addRes });\n        }\n        this.setState({ MarkdownContent: this.editorRef.current.getInstance().getMarkdown() });\n        // console.log(source, this.editorRef.current.getInstance().getMarkdown())\n    }\n\n\n    render() {\n        // const uploadProps = {\n        //     action: '',\n\n        // }\n        const { textareaValue, titleValue, initValue } = this.state\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <MailOutlined /> 钉钉工作通告\n                </Divider>\n\n\n               {/* 下方表格 */}\n               <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{fontSize:\"15px\", color: \"#000000\"}} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)' }}\n                    />\n                 </div>\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建模版\"\n                    width=\"645px\"\n                    bodyStyle={{margin:'10px 10px'}}\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"保存\"\n                    cancelText=\"取消\"\n                    destroyOnClose={true}\n                >\n\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n                        <Form.Item>\n                            <Row>\n                                <Col span={4}></Col>\n                                <Col span={20} className=\"radio-content\">\n                                    <Radio.Group defaultValue={1}\n                                        onChange={e => this.radioChange(e.target.value)}\n                                    >\n                                        <Radio value={1}>文本</Radio>\n                                        <Radio value={2}>Markdown</Radio>\n                                        <Radio value={3}>ActionCard</Radio>\n                                        {/* <Radio value={4}>OD</Radio> */}\n                                    </Radio.Group>\n                                </Col>\n                            </Row>\n                        </Form.Item>\n\n                        {/* 标题栏 */}\n                        <Form.Item\n                            label=\"标题名称\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"默认为模板名称\"\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                style={{ width: '461px' ,height: '40px',borderRadius:' 5px '}}\n                            />\n                        </Form.Item>\n\n                        {/* 添加附件 */}\n                        {/* {(this.state.flowState == '2' || this.state.flowState == '3') &&\n                            <Form.Item  style={{marginLeft:100}} >\n                                <Upload {...this.uploadProps}>\n                                    <LinkOutlined style={{ fontSize: '13px', color: '#000000' }} />添加附件｜<CaretDownOutlined />\n                                </Upload>\n                            </Form.Item>\n                        } */}\n\n                        {\n                            this.state.flowState == '1' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info1\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            // console.log(textareaValue);\n                                            if (!textareaValue) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <TextArea\n                                    value={textareaValue}\n                                    rows={4}\n                                    placeholder=\"请输入正文\"\n                                    onChange={this.handleTextareaChange.bind(this)}\n                                    style={{ width: '461px' ,height: '260px',borderRadius:' 5px '}}  \n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )}\n                                    trigger=\"click\"\n                                >\n                                    <div>查看示例</div>\n                                </Popover>\n                            </Form.Item>\n                        }\n\n                        {\n                            this.state.flowState == '2' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info2\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\"\n                                    onChange={this.onMarkdownChange}\n\n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                                `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )}\n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.List name=\"users\">\n                                {(fields, { add, remove }) => (\n                                    <>\n                                        {fields.map(({ key, name, fieldKey, ...restField }) => (\n                                            <Space key={key} style={{ display: 'flex' }} align=\"baseline\">\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad addAD-Input-Dad-First\"\n                                                    {...restField}\n                                                    name={[name, 'title']}\n                                                    fieldKey={[fieldKey, 'title']}\n                                                    rules={[{ required: true, message: '请输入按钮名称' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"按钮名称\" onChange ={this.onTitleChange.bind(this)} />\n                                                </Form.Item>\n                                                <Form.Item\n                                                    className=\"addAD-Input-Dad\"\n                                                    {...restField}\n                                                    name={[name, 'actionURL']}\n                                                    fieldKey={[fieldKey, 'actionURL']}\n                                                    rules={[{ required: true, message: '请输入链接url' }]}\n                                                >\n                                                    <Input className=\"addAD-Input\" placeholder=\"链接url\" onChange ={this.onURLChange.bind(this)}/>\n                                                </Form.Item>\n                                                <MinusCircleOutlined onClick={() => remove(name)} />\n                                            </Space>\n                                        ))}\n                                        <Form.Item>\n                                            <Button type=\"dashed\" className=\"addAD-Button\" onClick={() => add()} block icon={<PlusOutlined />}>\n                                                添加跳转\n                                    </Button>\n                                        </Form.Item>\n                                    </>\n                                )}\n                            </Form.List>\n                        }\n                        {\n                            this.state.flowState == '3' &&\n                            <Form.Item\n                                label=\"正文\"\n                                name=\"info3\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        validator: (_, _value, callback) => {\n                                            if (!this.state.MarkdownContent) {\n                                                callback('请输入正文')\n                                            } else {\n                                                callback()\n                                            }\n                                        }\n                                    },\n                                ]}\n                            >\n                                <Editor\n                                    ref={this.editorRef}\n                                    placeholder=\"请输入正文\"\n                                    previewStyle=\"vertical\"\n                                    height=\"330px\"\n                                    initialEditType=\"markdown\"\n                                    useCommandShortcut={true}\n                                    width=\"463px\"\n                                    onChange={this.onMarkdownChange}\n\n                                    config={\n                                        {\n                                            markdown: // testEditor.getMarkdown().replace(/`/g, '\\\\`')\n                                                `## Test\n                                            \\`\\`\\`\n                                            console.log('what can i do for you')\n                                            \\`\\`\\`\n\n                                            # 123123`,\n                                            onload: (editor, func) => {\n                                                let md = editor.getMarkdown();\n                                                let html = editor.getHTML();\n                                                debugger\n                                            }\n                                        }\n                                    }\n                                />\n                                <Popover\n                                    className=\"shili\"\n                                    placement=\"right\"\n                                    content={(\n                                        <div>\n                                            <p>示例：</p>\n                                            <p>&lt;p&gt;安全警告&lt;/p&gt;</p>\n                                        </div>\n                                    )\n                                    }\n                                    trigger=\"click\"\n                                >\n                                    <span>查看示例</span>\n                                </Popover>\n                            </Form.Item>\n                        }\n\n                        <Form.List  name=\"variable\" >\n                            {(fields, { remove }) => (\n                                <>\n                                    {fields.map(({ key, name, fieldKey, ...restField }) => {\n                                        let FormItem =\"\";\n                                        if(key == 0){\n                                            FormItem = (\n                                            <Form.Item\n                                                label=\"参数变量\"\n                                                className=\"variableFirst\"\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 220 }}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }else{\n                                            FormItem = (\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'name']}\n                                                fieldKey={[fieldKey, 'name']}\n                                                rules={[{ required: true }]}\n                                                style={{ width: 139, marginLeft:80}}\n                                            >\n                                            <Input disabled />\n                                            </Form.Item>)\n                                        }\n                                        return (<Space key={key} style={{ display: 'flex', marginBottom: 8 , marginLeft:15}} align=\"baseline\">\n                                            {FormItem}\n                                                \n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'value']}\n                                                fieldKey={[fieldKey, 'value']}\n                                                rules={[{ required: true, message: '请输入参数示例' }]}\n                                                style={{ width: 130 }}\n\n                                            >\n                                                <Input placeholder=\"参数示例\" />\n                                            </Form.Item>\n                                            <Form.Item\n                                                {...restField}\n                                                name={[name, 'desc']}\n                                                fieldKey={[fieldKey, 'desc']}\n                                                rules={[{ required: true, message: '请输入备注' }]}\n                                                style={{ width: 181 }}\n\n                                            >\n                                                <Input placeholder=\"备注\" />\n                                            </Form.Item>\n                                            <MinusCircleOutlined onClick={() => remove(name)} />\n                                        </Space>)\n                                    })}\n\n                                </>\n                            )}\n                        </Form.List>\n\n                    </Form>\n\n                </Modal>\n\n                {/* 编辑弹窗 */}\n                <EditDing\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.state.isCopy ? this.handleCopyOk : this.handleEditOk}\n                    isCopy={this.state.isCopy}\n                />\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getDingNotice({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    }\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                // console.log(this.state.flowState)\n                let data = {\n                    variable:this.formRef.current.getFieldValue('variable')\n                }\n                let type = ['text', 'markdown', 'actionCard']\n                data['content_format'] = type[parseInt(this.state.flowState) - 1]\n                if (this.state.flowState === 1) {\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            content: this.state.textareaValue,\n                        },\n                    }\n                } else if (this.state.flowState === 2) {\n                    console.log(this.state.MarkdownContent)\n                    // let path = {\n                    //     file: [],\n                    //     photo: []\n                    // }\n\n                    // this.state.file.forEach(ele => {\n                    //     path.file.push(ele.path)\n                    // })\n                    // this.state.photo.forEach(ele => {\n                    //     path.photo.push(ele.path)\n                    // })\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            text: this.state.MarkdownContent,\n                            title: this.state.titleValue,\n                        },\n                        path: null\n                    }\n                } else if (this.state.flowState === 3) {\n\n                    data = {\n                        ...data,\n                        ...val,\n                        title: this.state.titleValue,\n                        content: {\n                            title: this.state.titleValue,\n                            text: this.state.MarkdownContent,\n                            btnOrientation: \"0\",\n                            btns: this.formRef.current.getFieldValue('users')\n                        },\n                        path: null,\n                        // style:'ding_robot'\n                    }\n                }\n                apis.createDingNotice(data)\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteDingNotice(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleEdit = (e, obj) => {\n\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: false\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleCopy = (e, obj) => {\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            editVisible: true,\n            isCopy: true\n        });\n        // console.log(this.state.currentRowData)\n    }\n\n    handleEditCancel = (e) => {\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n\n    handleEditOk = (id, data) => {\n        // console.log(\"okk\", data.content_format===\"text\")\n        let val = {\n            variable:data.variable,\n            title: data.title,\n        }\n        switch (data.content_format) {\n            case \"text\":\n                val = {\n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format: \"text\",\n                };\n                break;\n            case \"markdown\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title\n                    },\n                    content_format: \"markdown\",\n                };\n                break;\n            case \"actionCard\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title,\n                        btnOrientation: \"0\",\n                        btns: data.users\n\n                    },\n                    content_format: \"actionCard\",\n                    // style:'ding_robot'\n                };\n                break;\n        }\n        // console.log(val)\n        apis.editDingNotice(id, val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n        })\n    };\n\n    handleCopyOk = (id, data) => {\n        console.log(\"okk\", data)\n        let val = {\n            variable:data.variable,\n            title: data.title,\n        }\n        switch (data.content_format) {\n            case \"text\":\n                val = {\n                    ...val,\n                    content: {\n                        content: data.content,\n                    },\n                    content_format: \"text\",\n                };\n                break;\n            case \"markdown\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title\n                    },\n                    content_format: \"markdown\",\n                };\n                break;\n            case \"actionCard\":\n                val = {\n                    ...val,\n                    content: {\n                        text: data.MarkdownContent,\n                        title: data.title,\n                        btnOrientation: \"0\",\n                        btns: data.users\n\n                    },\n                    content_format: \"actionCard\",\n                    // style:'ding_robot'\n                };\n                break;\n        }\n        // console.log(val)\n\n        apis.createDingNotice(val).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"复制成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"复制失败,请重试!\")\n        })\n    };\n\n\n\n\n}","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Upload, message, Row, Col, Popover, Select, Space, Radio, Cascader, Breadcrumb } from 'antd';\nimport { SearchOutlined, ClockCircleOutlined, InfoCircleOutlined, CheckCircleOutlined, CloseCircleOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusOutlined, HistoryOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './history.scss';\nimport Markdown from \"../../components/Markdown\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\n// import {bus} from \"./bus\";\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nexport default class MyHistory extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: null\n\n        },\n        current: \"\",//目前正在查看的item id\n        visible: false,\n        visibleDetail: false,\n        flowState: '',\n        styleFlowState: 1,\n        RadioFlowState: true,\n        atflowState: '',\n\n\n        // 要传输的数据（共同\n        titleValue: '',\n        tpl_id: '',\n        cronValue: '',\n        //邮件\n        toWhoValue: '',  //收件人\n        theUserName: '', //发件人\n        cc: '',\n        bcc: '',\n        //dingdingRobot\n        webhook: '',  //机器人地址\n        is_at_all: false,\n        // user_id_list: [],\n        theUser2Name: '',\n\n        mailDateSource: [],\n        SMSDateSource: [],\n        userDateSource: '',\n        robotDateSource: [],\n        groupDateSource: [],\n        noticeDateSource: [],\n\n        detail: {\n            tpl: {\n                title: ''\n            },\n            reason: '',\n            data: {\n                webhook: '',\n                name: '',\n                agent_id: '',\n                chat_id: '',\n\n            }\n        },\n\n        task_id: '',\n\n        filter_fields: {},\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {},\n        searchData: {},\n    }\n\n\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n\n\n    componentDidMount() {\n\n        this.state.task_id = this.props.location.search.slice(this.props.location.search.lastIndexOf('=') + 1, this.props.location.search.length)\n\n\n        apis.getHistory({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize,\n            task_id: this.state.task_id\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n        })\n    }\n\n    formRef = React.createRef();\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => {\n        let filterDropdown = '';\n        if (dataIndex === \"style\") {\n            filterDropdown = (\n                <Form\n                    ref={node => {\n                        this.searchInput[`${dataIndex}`] = node;\n                    }}\n                    style={{ width: 200, marginBottom: 0 }}\n                >\n                    <Form.Item\n                        name=\"search\"\n                        style={{ marginBottom: 8, marginTop: 5 }}\n\n                    >\n                        <Select\n                            showSearch\n                            allowClear\n                            value={this.state.searchArr[`${dataIndex}`] ? this.state.searchArr[`${dataIndex}`] : ''}\n                            style={{ width: 188 }}\n                            placeholder={`搜索 ${title}`}\n                            optionFilterProp=\"children\"\n                            onSelect={(e) => this.handleSearch(e, dataIndex)}\n                            filterOption={(input, option) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                        >\n                            <Option value=\"ding_record\">钉钉待办</Option>\n                            <Option value=\"ding_robot\">钉钉机器人</Option>\n                            <Option value=\"ding_group\">钉钉群通知</Option>\n                            <Option value=\"ding_notice\">钉钉工作通告</Option>\n                            <Option value=\"mail\">邮件</Option>\n                            <Option value=\"sms\">短信</Option>\n\n\n                            {/* {\n                                this.state.choice.map(ele => {\n                                    return <Option value={ele}>{ele}</Option>;\n                                })\n                            } */}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            );\n        } else if (dataIndex === \"is_periodic_tasks\") {\n            filterDropdown = (\n                <Form\n                    ref={node => { this.searchInput[`${dataIndex}`] = node; }}\n                    style={{ width: 200 }}\n                >\n                    <Form.Item name='search'>\n                        <Radio.Group\n                            style={{ display: 'block' }}\n                            onChange={(e) => { this.state.searchArr[dataIndex] = e.target.value; }}\n                        >\n                            <Radio style={{ display: 'inline', margin: 30 }} value={true}>是</Radio>\n                            <Radio style={{ display: 'inline' }} value={false}>否</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                </Form>\n            )\n        }\n\n        else {\n            filterDropdown = (\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{ color: '#B1B1B1', fontSize: '12px' }} />}\n                    placeholder={`搜索 ${title}`}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8, marginTop: 5 }}\n                />\n            )\n        }\n        return ({\n            filterDropdown: (\n                <div style={{ width: ' 200px', height: '97px', padding: 8, boxShadow: ' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius: '5px' }}>\n                    {filterDropdown}\n                    <Space>\n                        <Button\n                            onClick={(e) => this.handleReset(e, dataIndex)}\n                            size=\"small\"\n                            style={{ width: '67px', height: '21px', background: '##FFFFFF', border: '1px solid #DADADA', borderRadius: '5px', fontSize: '12px', margin: '12px' }}\n                        >\n                            重置\n                    </Button>\n                        <Button\n                            type=\"primary\"\n                            onClick={() => this.search()}\n                            icon={<SearchOutlined />}\n                            size=\"small\"\n                            style={{ width: '67px', height: '21px', background: '#40404C', border: '1px solid #40404C', borderRadius: '5px', fontSize: '12px', color: '#FFFFFF' }}\n                        >\n                            搜索\n                    </Button>\n                    </Space>\n                </div>\n            ),\n            filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n            render: (text) => {\n                if (dataIndex === \"style\") {\n\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.styleEtoC(this.state.searchData[dataIndex])]}\n                                autoEscape\n                                textToHighlight={this.styleEtoC(text) ? this.styleEtoC(text).toString() : ''}\n                            />\n                        </>\n                    } else { return this.styleEtoC(text) }\n                } else if (dataIndex === \"is_periodic_tasks\") {\n\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.state.searchData[dataIndex] ? \"是\" : \"否\"]}\n                                autoEscape\n                                textToHighlight={text ? \"是\" : \"否\" ? text ? \"是\" : \"否\".toString() : ''}\n                            />\n                        </>\n                    } else { return text ? \"是\" : \"否\" }\n                }\n                else {\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.state.searchData[dataIndex]]}\n                                autoEscape\n                                textToHighlight={text ? text.toString() : ''}\n                            />\n                        </>\n                    } else { return <>{text}</> }\n                }\n\n            }\n\n        })\n    }\n    handleSearch = (e, dataIndex) => {\n        if (dataIndex === 'style') {\n            this.state.searchArr[dataIndex] = [e]\n        } else {\n            this.state.searchArr[dataIndex] = [e.target.value]\n        }\n        // this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    }\n\n\n    handleReset = (e, dataIndex) => {\n        // this.searchInput[dataIndex].handleReset(e);\n        this.state.searchArr[dataIndex] = [];\n        this.search();\n    };\n\n    //每列名称\n    columns = [\n        {\n            title: \"推送ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 100\n        },\n        {\n            title: \"推送名称\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"推送名称\"),\n\n        },\n        {\n            title: \"任务ID\",\n            dataIndex: \"task_id\",\n            key: \"task_id\",\n            align: \"center\",\n            width: 150,\n            ...this.getColumnSearchProps(\"task_id\", \"任务ID\"),\n\n        },\n        {\n            title: \"推送类型\",\n            key: \"style\",\n            dataIndex: \"style\",\n            align: \"center\",\n            width: 150,\n            ...this.getColumnSearchProps(\"style\", \"推送类型\"),\n\n        },\n        {\n            title: \"周期发送\",\n            key: \"is_periodic_tasks\",\n            dataIndex: \"is_periodic_tasks\",\n            align: \"center\",\n            width: 120,\n            render: (val) =>\n                val ? <CheckCircleOutlined style={{ fontSize: '17px', color: '#0073E1 ' }} /> : <CloseCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n        },\n        {\n            title: \"状态\",\n            key: \"status\",\n            dataIndex: \"status\",\n            align: \"center\",\n            width: 80,\n            render: (val) => {\n                if (val == 1000) {\n                    return <CheckCircleOutlined style={{ fontSize: '17px', color: '#0073E1 ' }} />\n                } else if (val == 999) {\n                    return <CloseCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n                } else if (val == 300) {\n                    return <ClockCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n                } else if (val == 100) {\n                    return <ClockCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n                } else {\n                    return <InfoCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n                }\n            }\n        },\n\n        {\n            title: \"推送时间\",\n            dataIndex: \"created_at\",\n            key: \"created_at\",\n            align: \"center\",\n            width: 180\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            fixed: 'right',\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDetail(e, obj)}>详情</Button>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleSend(e, obj)}>重发</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n    cronExample = (\n        <div>\n            <p>https://cron.qqe2.com/ </p>\n            <p>https://tool.lu/crontab</p>\n            <p>https://mviess.de/sysadm/crontabmaker/index.php</p>\n        </div>\n    );\n\n    styleEtoC = (val) => {\n        if (val == \"ding_group\") {\n            return \"钉钉群通知\"\n        } else if (val == \"ding_robot\") {\n            return \"钉钉机器人\"\n        } else if (val == \"ding_notice\") {\n            return \"钉钉工作通告\"\n        } else if (val == \"ding_record\") {\n            return \"钉钉待办\"\n        } else if (val == \"mail\") {\n            return \"邮件\"\n        } else if (val == \"sms\") {\n            return \"短信\"\n        } else if (val == \"tel\") {\n            return \"电话\"\n        } else {\n            return \"未知类型\"\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <HistoryOutlined />  历史推送\n                </Divider>\n\n\n                {/*搜索模块*/}\n                {/* <div className=\"app-search\"> */}\n                <Row style={{ marginBottom: 10 }}>\n                    <Col span={8}>\n                        <Breadcrumb style={{ marginLeft: 30, marginTop: 20 }}>\n                            <Breadcrumb.Item onClick={(e) => { this.setState({ task_id: '' }); this.getRefresh() }}>\n                                <NavLink to={`/task/history`}>\n                                    所有历史\n                        </NavLink>\n                            </Breadcrumb.Item>\n                            {this.state.task_id !== '' &&\n                                <Breadcrumb.Item>\n                                    id:{this.state.task_id}的历史\n                        </Breadcrumb.Item>\n                            }\n                        </Breadcrumb>\n                    </Col>\n\n\n                </Row>\n                {/* <Button className=\"new-button\" type=\"primary\" onClick={this.showModal} htmlType=\"submit\">\n                        新建推送\n                    </Button> */}\n                {/* </div> */}\n\n                {/* 下方表格 */}\n                <Table\n                    columns={this.columns}\n                    dataSource={this.state.dataSource}\n                    pagination={this.state.pagination}\n                    scroll={{ y: 'calc(100vh - 280px)', x: '100%' }}\n                />\n\n\n                {/* 详情弹窗 */}\n                <Modal\n                    title=\"详情\"\n                    width=\"645px\"\n                    className=\"Detail\"\n\n                    visible={this.state.visibleDetail}\n                    onCancel={(e) => { this.setState({ visibleDetail: false }) }}\n                    footer={\n                        [] // 设置footer为空，去掉 取消 确定默认按钮\n                    }\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    bodyStyle={{ overflowY: 'auto', marginLeft: '45px', padding: \"15px 10% 80px 10%\" }}\n                >\n\n                    <span className=\"title\"> 推送名称：</span>\n                    <span className=\"ans\">{this.state.detail.title}</span>\n                    <br />\n                    <span className=\"title\"> 推送类型：</span>\n                    <span className=\"ans\">{this.state.detail.style == \"ding_group\" ? \"钉钉群通知\" :\n                        this.state.detail.style == \"ding_robot\" ? \"钉钉机器人\" :\n                            this.state.detail.style == \"ding_notice\" ? \"钉钉工作通告\" :\n                                this.state.detail.style == \"ding_record\" ? \"钉钉待办\" :\n                                    this.state.detail.style == \"mail\" ? \"邮件\" :\n                                        this.state.detail.style == \"sms\" ? \"短信\" :\n                                            this.state.detail.style == \"tel\" ? \"电话\" : \"未知类型\"\n\n                    }</span>\n                    <br />\n\n                    <span className=\"title\"> 模板id：</span>\n                    <span className=\"ans\">{this.state.detail.tpl_id}</span>\n                    <br />\n                    <span className=\"title\"> 模板标题：</span>\n                    <span className=\"ans\">{this.state.detail.tpl.title}</span>\n                    <br />\n                    <span className=\"title\"> 推送时间：</span>\n                    <span className=\"ans\">{this.state.detail.created_at}</span>\n                    <br />\n                    <span className=\"title\"> 发件方：</span>\n                    <span className=\"ans\">{\n                        this.state.detail.style == \"ding_group\" ? this.state.detail.data.chat_id :\n                            this.state.detail.style == \"ding_robot\" ? this.state.detail.data.webhook :\n                                this.state.detail.style == \"ding_notice\" ? this.state.detail.data.agent_id :\n                                    this.state.detail.style == \"mail\" ? this.state.detail.data.name :\n                                        this.state.detail.style == \"sms\" ? \"管理员短信\" :\n                                            this.state.detail.style == \"tel\" ? \"管理员电话\" : \"管理员\"\n                    }</span>\n                    <br />\n                    <span className=\"title\"> 收件方：</span>\n                    <span className=\"ans\">{this.state.detail.receiver}</span>\n                    <br />\n                    <span className=\"title\"> 状态：</span>\n                    <span className=\"ans\">{this.state.detail.status == 1000 ? \"完成\" :\n                        this.state.detail.status == 999 ? \"失败\" :\n                            this.state.detail.status == 300 ? \"执行中\" :\n                                this.state.detail.status == 100 ? \"等待中\" : \"未知状态\"\n                    }</span>\n                    <br />\n\n                    <span className=\"title\"> 状态原因：</span>\n                    <span className=\"ans\">{this.state.detail.reason}</span>\n                    <br />\n\n                </Modal>\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getHistory({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n                    },\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                let datas = {};\n                if (this.state.atflowState == 11) {\n                    this.setState({ is_at_all: true })\n                }\n                if (this.state.flowState === 1) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                            username: this.state.theUserName,\n                            cc: this.state.cc,\n                            bcc: this.state.bcc,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'mail',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n                else if (this.state.flowState === 2) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'sms',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n\n                else if (this.state.flowState === 3) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            agent_id: this.state.theUser2Name,\n                            user_id_list: this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_notice',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n                else if (this.state.flowState === 4) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            chat_id: this.state.theUser2Name,\n                            user_id_list: this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_group',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n                else if (this.state.flowState === 5) {\n\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            webhook: this.state.webhook,\n                            is_at_all: this.state.is_at_all,\n                            user_id_list: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_robot',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    }\n                };\n\n                apis.createHistory(datas);\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteHistory(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleDetail = (e, obj) => {\n        apis.detailHistory(obj.id).then(res => {\n\n            if (res.code == 0) {\n                this.setState({\n                    visibleDetail: true,\n                    detail: res.data\n                });\n                console.log(res)\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n\n    handleSend = (e, obj) => {\n        let that = this;\n        confirm({\n            title: ``,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要重新发送${obj.title}吗？`,\n            okText: '发送',\n            cancelText: '取消',\n            onOk() {\n                that.sendAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    sendAction = (e, obj) => {\n        apis.sendHistory(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"发送成功！\");\n                this.getRefresh();\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n\n}","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component, useState } from \"react\";\nimport { Table, Form, Button, Input, Divider, Modal, Upload, message, Row, Col, Popover, Select, Space, Radio, Cascader } from 'antd';\nimport { SearchOutlined, MailOutlined, LinkOutlined, PictureOutlined, CaretDownOutlined, ExclamationCircleOutlined, MinusCircleOutlined, PlusOutlined, HistoryOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './history.scss';\nimport Markdown from \"../../components/Markdown\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\n// import {bus} from \"./bus\";\nimport { NavLink} from \"react-router-dom\";\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nexport default class HistoryDetail extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 8,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: null\n\n        },\n        current: \"\",//目前正在查看的item id\n        visible: false,\n        visibleDetail:false,\n        flowState: '',\n        styleFlowState: 1,\n        RadioFlowState: true,\n        atflowState:'',\n\n\n        // 要传输的数据（共同\n        titleValue: '',\n        tpl_id: '',\n        cronValue: '',\n        //邮件\n        toWhoValue: '',  //收件人\n        theUserName: '', //发件人\n        cc: '',\n        bcc: '',\n        //dingdingRobot\n        webhook: '',  //机器人地址\n        is_at_all: false,\n        // user_id_list: [],\n        theUser2Name:'',\n\n        mailDateSource: [],\n        SMSDateSource: [],\n        userDateSource: '',\n        robotDateSource: [],\n        groupDateSource: [],\n        noticeDateSource: [],\n\n        detail:{\n            tpl: {\n                title: ''\n            },\n            reason:'',\n            data:{\n                webhook:'',\n                name:'',\n                agent_id:'',\n                chat_id:'',\n\n            }\n        },\n\n        task_id:'',\n    }\n\n    \n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n    \n    \n\n    componentDidMount() {\n        // bus.on('id',\n        // let parentData = {}\n        // bus.on('id',(data) => {\n        //     parentData = data\n        //     this.state.task_id = data.task_id;\n        //     debugger\n        //     console.log(data,this.state.task_id)\n        // })\n        console.log(this.props.location.search.slice(this.props.location.search.lastIndexOf('=') + 1, this.props.location.search.length))\n        this.state.task_id=this.props.location.search.slice(this.props.location.search.lastIndexOf('=') + 1, this.props.location.search.length)\n        console.log(this.state.task_id)\n        apis.getHistory({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize,\n            task_id:this.state.task_id\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    className: \"dingdingRobot-pagination\",\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange\n                }\n            })\n            console.log(res)\n        })\n    }\n\n    formRef = React.createRef();\n\n\n    //每列名称\n    columns = [\n        {\n            title: \"推送ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 100\n        },\n        {\n            title: \"推送名称\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"推送类型\",\n            key: \"style\",\n            dataIndex: \"style\",\n            align: \"center\",\n            width: 150,\n            render: (val) => {\n                if (val == \"ding_group\") {\n                    return <>钉钉群通知</>\n                } else if (val == \"ding_robot\") {\n                    return <> 钉钉机器人</>\n                } else if (val == \"ding_notice\") {\n                    return <> 钉钉公告</>\n                } else if (val == \"mail\") {\n                    return <> 邮件</>\n                } else if (val == \"sms\") {\n                    return <> 短信</>\n                } else if (val == \"tel\") {\n                    return <> 电话</>\n                } else {\n                    return <> 未知类型</>\n                }\n            }\n        },\n        {\n            title: \"发送方式\",\n            key: \"is_periodic_tasks\",\n            dataIndex: \"is_periodic_tasks\",\n            align: \"center\",\n            width: 150,\n            render: (val) => {\n                if (val == false) {\n                    return <>立即发送 </>\n                }\n\n                else {\n                    return <> 定时发送</>\n                }\n            }\n        },\n        {\n            title: \"状态\",\n            key: \"status\",\n            dataIndex: \"status\",\n            align: \"center\",\n            width: 150,\n            render: (val) => {\n                if (val == 1000) {\n                    return <>完成</>\n                } else if (val == 999) {\n                    return <> 失败</>\n                } else if (val == 300) {\n                    return <> 执行中</>\n                } else if (val == 100) {\n                    return <> 等待中</>\n                } else {\n                    return <> 未知状态</>\n                }\n            }\n        },\n\n        {\n            title: \"推送时间\",\n            dataIndex: \"created_at\",\n            key: \"created_at\",\n            align: \"center\",\n            width: 200\n        },\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDetail(e, obj)}>详情</Button>\n                    <Button className=\"handle-button\">重发</Button>\n\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button>\n\n                </>\n            }\n        },\n    ];\n\n    cronExample = (\n        <div>\n            <p>https://cron.qqe2.com/ </p>\n            <p>https://tool.lu/crontab</p>\n            <p>https://mviess.de/sysadm/crontabmaker/index.php</p>\n        </div>\n    );\n\n\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n    handleToWhoChange(e) {\n        this.setState({\n            toWhoValue: e.target.value\n        })\n    }\n\n    handleUserChange(e) {\n        this.setState({\n            theUserName: e\n        })\n    }\n\n    handleUser2Change(e) {\n        this.setState({\n            theUser2Name: e.target.value\n        })\n    }\n\n    handleWebhookChange(e) {\n        this.setState({\n            webhook: e.target.value\n        })\n    }\n\n    handleCronChange(e) {\n        console.log(e)\n        this.setState({\n            cronValue: e.target.value\n        })\n    }\n\n\n    onFocusMail = (e) => {\n        let that = this;\n        apis.getMailbox({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data.results)\n                that.setState({\n                    mailDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusSMS = (e) => {\n        let that = this;\n        apis.getSMS({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data)\n                that.setState({\n                    SMSDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusRobot = (e) => {\n        let that = this;\n        apis.getDingRobot({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    robotDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusGroup = (e) => {\n        let that = this;\n        apis.getDingGroup({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    groupDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusNotice = (e) => {\n        let that = this;\n        apis.getDingNotice({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    noticeDateSource: res.data.results\n                });\n                // console.log(this.state.noticeDateSource)\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusUser = (e) => {\n        let that = this;\n        apis.getUser().then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data.results)\n                that.setState({\n                    userDateSource: res.data\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    MailCopyChange = (val, op) => {\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    SMSCopyChange = (val, op) => {\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    RobotCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    GroupCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    NoticeCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    render() {\n        // bus.on('id',(data) => {this.state.task_id = data.task_id;console.log(data,this.state.task_id)})\n\n        // console.log('then',this.state.task_id)\n\n        const { titleValue, toWhoValue, webhook, RadioFlowState, cronValue,theUser2Name } = this.state\n\n        const userChildren = [];\n        for (let i = 0; i < this.state.userDateSource.length; i++) {\n            userChildren.push(<Option key={this.state.userDateSource[i].value} children>{this.state.userDateSource[i].name}</Option>);\n        }\n\n\n        const mailChildren = [];\n        for (let i = 0; i < this.state.mailDateSource.length ; i++) {\n            mailChildren.push({\n                value: this.state.mailDateSource[i].id,\n                label: this.state.mailDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.mailDateSource[i].content.content,\n                        label: this.state.mailDateSource[i].content.content,\n                    }\n                ]\n            })\n        };\n\n        const SMSChildren = [];\n        for (let i = 0; i < this.state.SMSDateSource.length ; i++) {\n            SMSChildren.push({\n                value: this.state.SMSDateSource[i].id,\n                label: this.state.SMSDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.SMSDateSource[i].content.content,\n                        label: this.state.SMSDateSource[i].content.content,\n                    }\n                ]\n            })\n        };\n\n        const robotChildren = [];\n        for (let i = 0; i < this.state.robotDateSource.length ; i++) {\n            robotChildren.push({\n                value: this.state.robotDateSource[i].id,\n                label: this.state.robotDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.robotDateSource[i].content.text,\n                        label: this.state.robotDateSource[i].content.text,\n                    }\n                ]\n            })\n        };\n\n        const noticeChildren = [];\n        for (let i = 0; i < this.state.noticeDateSource.length; i++) {\n            noticeChildren.push({\n                value: this.state.noticeDateSource[i].id,\n                label: this.state.noticeDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.noticeDateSource[i].content.text,\n                        label: this.state.noticeDateSource[i].content.text,\n                    }\n                ]\n            })\n        };\n\n        const groupChildren = [];\n        for (let i = 0; i < this.state.groupDateSource.length ; i++) {\n            groupChildren.push({\n                value: this.state.groupDateSource[i].id,\n                label: this.state.groupDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.groupDateSource[i].content.text,\n                        label: this.state.groupDateSource[i].content.text,\n                    }\n                ]\n            })\n        };\n\n\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <HistoryOutlined />  id:{this.state.task_id}的历史推送记录\n                </Divider>\n\n                {/*搜索模块*/}\n                <div>\n                    <Row justify='center'>\n                        <Col span={8}>\n                        <NavLink to={'/task'}>\n                            <Button className=\"input-button\" type=\"primary\">\n                                返回\n                            </Button>\n                        </NavLink>\n                        </Col>\n                   \n                        <Col span={6}>\n                        \n                            <Input className=\"input\" prefix={<SearchOutlined />} placeholder=\"请输入关键词\" />\n                        </Col>\n                        <Col span={8}>\n                    \n                            <Button className=\"input-button\" type=\"primary\" htmlType=\"submit\">\n                                搜索\n                            </Button>\n                        \n                        </Col>\n                       \n                    </Row>\n                </div>\n\n                {/* 下方表格 */}\n                <Table\n                    columns={this.columns}\n                    dataSource={this.state.dataSource}\n                    pagination={this.state.pagination}\n                />\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建推送\"\n                    width=\"645px\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"执行\"\n                    cancelText=\"取消\"\n                    bodyStyle={{ height: '580px', overflowY: 'auto', marginLeft: '45px' }}\n                >\n\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n\n                        {/* 标题栏 */}\n                        <Form.Item\n                            label=\"推送名称\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入标题')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"请输入推送名称\"\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                            />\n                        </Form.Item>\n\n\n                        <Form.Item\n                            label=\"推送类型\"\n                            name=\"style\"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n\n                            ]}\n                        >\n                            <Select\n                                style={{ width: 400 }}\n                                onChange={e => { this.setState({ flowState: e }) }}\n                                className=\"selectStyle\"\n                            >\n                                <Option value={1} >邮件</Option>\n                                <Option value={2} >短信</Option>\n                                <Option value={3} >钉钉工作通告</Option>\n                                <Option value={4} >钉钉群通知</Option>\n                                <Option value={5} >钉钉机器人</Option>\n                            </Select>\n                        </Form.Item>\n\n\n\n                        {\n                            this.state.flowState == '1' &&\n                            <>\n                                <Form.Item\n                                    label=\"发件人\"\n                                    name=\"mail-1\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        placeholder=\"请选择发件人\"\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        onChange={this.handleUserChange.bind(this)}\n                                        // className=\"selectStyle\"\n                                        onFocus={this.onFocusUser}\n                                    >\n                                        {userChildren}\n                                    </Select>\n                                </Form.Item>\n\n\n                                <Form.Item\n                                    label=\"收件人\"\n                                    name=\"mail-3\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"邮箱\"\n                                        value={toWhoValue}\n                                        onChange={this.handleToWhoChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n                                </Form.Item>\n\n                                {/* <Form.Item\n                                label=\"\"\n                                name=\"mail-4\"\n                                rules={[\n                                    {\n                                        required: true\n                                    },\n                                ]}\n                                style={{minHeight: 10}}\n                            >\n                                \n                            </Form.Item> */}\n\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={e => { this.setState({ RadioFlowState: e.target.value }) }} value={RadioFlowState}\n                                    >\n                                        <Radio value={true}>立即发送</Radio>\n                                        <Radio value={false}>定时发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n                                {\n                                    RadioFlowState == false &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n                                    </Form.Item>\n                                }\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                    // className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} >手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={mailChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusMail}\n                                                onChange={this.MailCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '2'  && <>\n\n                                <Form.Item\n                                    label=\"接收方\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入接收方\"\n                                        value={toWhoValue}\n                                        onChange={this.handleToWhoChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={e => { this.setState({ RadioFlowState: e.target.value }) }} value={RadioFlowState}\n                                    >\n                                        <Radio value={true}>立即发送</Radio>\n                                        <Radio value={false}>定时发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n                                {\n                                    RadioFlowState == false &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n                                    </Form.Item>\n                                }\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                    // className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} >手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={SMSChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusSMS}\n                                                onChange={this.SMSCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n\n                            </>\n                        }\n\n                        {  \n                            this.state.flowState == '3'  &&\n                            <>\n                                <Form.Item\n                                    label=\"发送方\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={theUser2Name}\n                                        onChange={this.handleUser2Change.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item>\n\n\n\n                                <Form.Item\n                                    label=\"接收对象\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                        // defaultValue={12}\n                                    >\n                                        <Option value={11} >@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState== 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                }\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"mail-5\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group onChange={e => { this.setState({ RadioFlowState: e.target.value }) }} value={RadioFlowState}\n                                    >\n                                        <Radio value={true}>立即发送</Radio>\n                                        <Radio value={false}>定时发送</Radio>\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    RadioFlowState == false &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                    // className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} >手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={noticeChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusNotice}\n                                                onChange={this.NoticeCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n                        \n                        {  \n                            this.state.flowState == '4' &&\n                            <>\n                                <Form.Item\n                                    label=\"发送方\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={theUser2Name}\n                                        onChange={this.handleUser2Change.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item>\n\n\n\n                                {/* <Form.Item\n                                    label=\"接收对象\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                    >\n                                        <Option value={10} >不@任何人</Option>\n                                        <Option value={11} >@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState== 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                } */}\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group onChange={e => { this.setState({ RadioFlowState: e.target.value }) }} value={RadioFlowState}\n                                    >\n                                        <Radio value={true}>立即发送</Radio>\n                                        <Radio value={false}>定时发送</Radio>\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    RadioFlowState == false &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                    // className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} >手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                 options={groupChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusGroup}\n                                                onChange={this.GroupCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {  \n                            this.state.flowState == '5' &&\n                            <>\n                                <Form.Item\n                                    label=\"发送方\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={webhook}\n                                        onChange={this.handleWebhookChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item>\n\n\n\n                                <Form.Item\n                                    label=\"发送对象\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                    >\n                                        <Option value={10} >不@任何人</Option>\n                                        <Option value={11} >@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState== 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                }\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"mail-5\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group onChange={e => { this.setState({ RadioFlowState: e.target.value }) }} value={RadioFlowState}\n                                    >\n                                        <Radio value={true}>立即发送</Radio>\n                                        <Radio value={false}>定时发送</Radio>\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    RadioFlowState == false &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                    // className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} >手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={robotChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusRobot}\n                                                onChange={this.RobotCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                    </Form>\n\n                </Modal>\n\n                {/* 详情弹窗 */}\n                <Modal\n                    title=\"详情\"\n                    width=\"645px\"\n                    visible={this.state.visibleDetail}\n                    onCancel={(e)=> {this.setState({visibleDetail: false})}}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    bodyStyle={{ height: '580px', overflowY: 'auto', marginLeft: '45px' }}\n                >\n\n                    <span className=\"title\"> 推送名称：</span>\n                    <span className=\"ans\">{this.state.detail.title}</span>\n                    <br />\n                    <span className=\"title\"> 推送名称：</span>\n                    <span className=\"ans\">{this.state.detail.style==\"ding_group\"?\"钉钉群通知\":\n                                            this.state.detail.style==\"ding_robot\"?\"钉钉机器人\":\n                                            this.state.detail.style==\"ding_notice\"?\"钉钉公告\":\n                                            this.state.detail.style == \"mail\"?\"邮件\":\n                                            this.state.detail.style == \"sms\"?\"短信\":\n                                            this.state.detail.style == \"tel\"?\"电话\":\"未知类型\"\n\n                                            }</span>\n                    <br />\n                 \n                    <span className=\"title\"> 模板id：</span>\n                    <span className=\"ans\">{this.state.detail.tpl_id}</span>\n                    <br />\n                    <span className=\"title\"> 模板标题：</span>\n                    <span className=\"ans\">{this.state.detail.tpl.title}</span>\n                     <br />\n                    <span className=\"title\"> 创建时间：</span>\n                    <span className=\"ans\">{this.state.detail.created_at}</span>\n                    <br />\n                    <span className=\"title\"> 发件方：</span>\n                    <span className=\"ans\">{\n                                            this.state.detail.style==\"ding_group\"?this.state.detail.data.chat_id:\n                                            this.state.detail.style==\"ding_robot\"?this.state.detail.data.webhook:\n                                            this.state.detail.style==\"ding_notice\"?this.state.detail.data.agent_id:\n                                            this.state.detail.style == \"mail\"?this.state.detail.data.name:\n                                            this.state.detail.style == \"sms\"?\"管理员短信\":\n                                            this.state.detail.style == \"tel\"?\"管理员电话\":\"未知类型\"\n                                            }</span>\n                    <br />\n                    <span className=\"title\"> 收件方：</span>\n                    <span className=\"ans\">{\"暂无\"}</span>\n                    <br />\n                    <span className=\"title\"> 状态：</span>\n                    <span className=\"ans\">{this.state.detail.status == 1000? \"完成\":\n                                            this.state.detail.status == 999? \"失败\":\n                                            this.state.detail.status == 300? \"执行中\":\n                                            this.state.detail.status == 100? \"等待中\":\"未知状态\"\n                                        }</span>\n                    <br />\n                    \n                    <span className=\"title\"> 状态原因：</span>\n                    <span className=\"ans\">{this.state.detail.reason}</span>\n                    <br />\n                    \n                </Modal>\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getHistory({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        className: \"dingdingRobot-pagination\",\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                    }\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                let datas = {};\n                if(this.state.atflowState==11){\n                    this.setState({is_at_all:true})\n                }\n                if (this.state.flowState === 1) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                            username: this.state.theUserName,\n                            cc: this.state.cc,\n                            bcc: this.state.bcc,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'mail',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                } \n                else if (this.state.flowState === 2) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'sms',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n\n                else if (this.state.flowState === 3) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            agent_id: this.state.theUser2Name,\n                            user_id_list:this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_notice',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n                else if (this.state.flowState === 4) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            chat_id: this.state.theUser2Name,\n                            user_id_list:this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_group',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    };\n                }\n                else if (this.state.flowState === 5) {\n                    \n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            webhook: this.state.webhook,\n                            is_at_all: this.state.is_at_all,\n                            user_id_list: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_robot',\n                        is_run_now: this.state.RadioFlowState,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: !this.state.RadioFlowState\n                    }\n                };\n\n                apis.createHistory(datas);\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除模版`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteHistory(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleDetail = (e, obj) => {\n        apis.detailHistory(obj.id).then(res => {\n\n            if (res.code == 0) {\n                 this.setState({\n                    visibleDetail: true,\n                    detail:res.data\n                });\n                console.log(res)\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n\n}","import React, { Component } from \"react\";\nimport apis from \"../../../utils/api/unsplash/index\";\n\nimport { Form, Input, Row, Select, Col, Modal, Radio, message, Popover, Cascader } from \"antd\";\n// import { Form } from \"@ant-design/compatible\"\nimport moment from \"moment\";\nimport \"moment/locale/zh-cn\";\nmoment.locale(\"zh-cn\");\nexport default class EditForm extends Component {\n  state = {\n\n    titleValue: '',\n    tpl_id: '',\n    cronValue: '',\n    //邮件\n    toWhoValue: '',  //收件人\n    theUserName: '', //发件人\n    cc: '',\n    bcc: '',\n\n    //dingdingRobot\n    webhook: '',  //机器人地址\n    is_at_all: false,\n    // user_id_list: [],\n    theUser2Name: '',\n    is_run_now: false,\n    is_periodic_tasks: false,\n\n    mailDateSource: [],\n    SMSDateSource: [],\n    userDateSource: '',\n    robotDateSource: [],\n    groupDateSource: [],\n    noticeDateSource: [],\n    recordDateSource: [],\n\n    styleFlowState: \"111\",\n    atflowState: \"\",\n\n    cronChange: false\n\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // console.log(\"componentWillReceiveProps\")\n    // if (this.props.currentRowData !== nextProps.currentRowData) {\n    this.setState({\n      is_periodic_tasks: nextProps.currentRowData.is_periodic_tasks,\n      is_at_all: Object.hasOwnProperty.call(nextProps.currentRowData, \"data\") ? nextProps.currentRowData.data.is_at_all : false,\n      atflowState: nextProps.currentRowData.style == \"ding_robot\" ? Object.hasOwnProperty.call(nextProps.currentRowData, \"data\") ? nextProps.currentRowData.data.is_at_all ? 11 : nextProps.currentRowData.data.user_id_list.length ? 12 : 10 : '' : '',\n      recordFlowState: Object.hasOwnProperty.call(nextProps.currentRowData, \"data\") ? nextProps.currentRowData.data.is_alone : false,\n    });\n    // }\n  }\n\n  onFocusUser = (e) => {\n    let that = this;\n    apis.getUser().then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        // console.log(res.data.results)\n        that.setState({\n          userDateSource: res.data\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusMail = (e) => {\n    let that = this;\n    apis.getMailbox({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        // console.log(res.data.results)\n        that.setState({\n          mailDateSource: res.data.results\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusSMS = (e) => {\n    let that = this;\n    apis.getSMS({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        // console.log(res.data)\n        that.setState({\n          SMSDateSource: res.data.results\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusRobot = (e) => {\n    let that = this;\n    apis.getDingRobot({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        that.setState({\n          robotDateSource: res.data.results\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusGroup = (e) => {\n    let that = this;\n    apis.getDingGroup({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        that.setState({\n          groupDateSource: res.data.results\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusNotice = (e) => {\n    let that = this;\n    apis.getDingNotice({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        that.setState({\n          noticeDateSource: res.data.results\n        });\n        // console.log(this.state.noticeDateSource)\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n  onFocusRecord = (e) => {\n    let that = this;\n    apis.getDingRecord({\n      page: '1',\n      // size: this.state.pageSize,\n      // ...this.state.searchData\n    }).then(res => {\n      // console.log(res);\n      if (res.code == 0 || res.code == 200) {\n        // console.log(res.data)\n        that.setState({\n          recordDateSource: res.data.results\n        });\n      } else {\n        message.error(res.message);\n      }\n    }).catch(err => {\n      message.error(err);\n    });\n  }\n\n\n  cronExample = (\n    <div>\n      <p>https://cron.qqe2.com/ </p>\n      <p>https://tool.lu/crontab</p>\n      <p>https://mviess.de/sysadm/crontabmaker/index.php</p>\n    </div>\n  );\n\n\n  editFormRef = React.createRef();\n\n\n  render() {\n    const {\n      visible,\n      currentRowData,\n    } = this.props;\n\n\n    const { Option } = Select;\n\n    // const { getFieldDecorator } = form;\n    const { data, style, is_alone, is_periodic_tasks, is_run_now, tpl_id } = currentRowData;\n    const send_style = is_run_now ? 2 : is_periodic_tasks ? 3 : 1\n    const formItemLayout = {\n      labelCol: {\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        sm: { span: 16 },\n      },\n    };\n\n    const userChildren = [];\n    for (let i = 0; i < this.state.userDateSource.length; i++) {\n      userChildren.push(<Option key={this.state.userDateSource[i].value} children>{this.state.userDateSource[i].name}</Option>);\n    }\n\n\n    const mailChildren = [];\n    for (let i = 0; i < this.state.mailDateSource.length; i++) {\n      mailChildren.push({\n        value: this.state.mailDateSource[i].id,\n        label: this.state.mailDateSource[i].title,\n        children: [\n          {\n            value: this.state.mailDateSource[i].id,\n            label: this.state.mailDateSource[i].content.content,\n          }\n        ]\n      })\n    };\n\n    const SMSChildren = [];\n    for (let i = 0; i < this.state.SMSDateSource.length; i++) {\n      SMSChildren.push({\n        value: this.state.SMSDateSource[i].id,\n        label: this.state.SMSDateSource[i].title,\n        children: [\n          {\n            value: this.state.SMSDateSource[i].id,\n            label: this.state.SMSDateSource[i].content.content,\n          }\n        ]\n      })\n    };\n\n    const robotChildren = [];\n    for (let i = 0; i < this.state.robotDateSource.length; i++) {\n      this.state.robotDateSource[i].content_format === \"text\" ? robotChildren.push({\n        value: this.state.robotDateSource[i].id,\n        label: this.state.robotDateSource[i].title,\n        children: [\n          {\n            value: this.state.robotDateSource[i].content.content,\n            label: this.state.robotDateSource[i].content.content,\n          }\n        ]\n      }) :\n        robotChildren.push({\n          value: this.state.robotDateSource[i].id,\n          label: this.state.robotDateSource[i].title,\n          children: [\n            {\n              value: this.state.robotDateSource[i].content.text,\n              label: this.state.robotDateSource[i].content.text,\n            }\n          ]\n        })\n    };\n\n    const noticeChildren = [];\n    for (let i = 0; i < this.state.noticeDateSource.length; i++) {\n      this.state.noticeDateSource[i].content_format === \"text\" ? noticeChildren.push({\n        value: this.state.noticeDateSource[i].id,\n        label: this.state.noticeDateSource[i].title,\n        children: [\n          {\n            value: this.state.noticeDateSource[i].content.content,\n            label: this.state.noticeDateSource[i].content.content,\n          }\n        ]\n      }) :\n        noticeChildren.push({\n          value: this.state.noticeDateSource[i].id,\n          label: this.state.noticeDateSource[i].title,\n          children: [\n            {\n              value: this.state.noticeDateSource[i].content.text,\n              label: this.state.noticeDateSource[i].content.text,\n            }\n          ]\n        })\n    };\n\n    const groupChildren = [];\n    for (let i = 0; i < this.state.groupDateSource.length; i++) {\n      this.state.groupDateSource[i].content_format === \"text\" ? groupChildren.push({\n        value: this.state.groupDateSource[i].id,\n        label: this.state.groupDateSource[i].title,\n        children: [\n          {\n            value: this.state.groupDateSource[i].content.content,\n            label: this.state.groupDateSource[i].content.content,\n          }\n        ]\n      }) :\n        groupChildren.push({\n          value: this.state.groupDateSource[i].id,\n          label: this.state.groupDateSource[i].title,\n          children: [\n            {\n              value: this.state.groupDateSource[i].content.text,\n              label: this.state.groupDateSource[i].content.text,\n            }\n          ]\n        })\n    };\n\n    const recordChildren = [];\n    for (let i = 0; i < this.state.recordDateSource.length; i++) {\n      recordChildren.push({\n        value: this.state.recordDateSource[i].id,\n        label: this.state.recordDateSource[i].title,\n        children: [\n          {\n            value: this.state.recordDateSource[i].content.content,\n            label: this.state.recordDateSource[i].content.content,\n          }\n        ]\n      })\n    };\n\n    return (\n      <Modal\n        title=\"编辑\"\n        visible={visible}\n        onCancel={this.handleCancel}\n        onOk={this.handleOk}\n        destroyOnClose={true}\n        okText='更新'\n        width='645px'\n        bodyStyle={{ margin: '50px 50px' }}\n      >\n        <Form {...formItemLayout} initialValues={{ ...currentRowData, ...data }} ref={this.editFormRef}>\n          <Form.Item\n            label=\"推送名称\"\n            name=\"title\"\n            // initialValue={title}\n            rules={[{ required: true }]}\n          >\n            <Input\n              placeholder=\"请输入推送名称\"\n              style={{ width: 400, height: 40, borderRadius: 5 }}\n            />\n          </Form.Item>\n\n          <Form.Item\n            label=\"推送类型\"\n            name=\"style\"\n            rules={[{ required: true }]}\n          // initialValue={style}\n\n          >\n            <Select\n              style={{ width: 400, height: 40, borderRadius: 5 }}\n              className=\"selectStyle\"\n              disabled\n            >\n              <Option value=\"mail\" >邮件</Option>\n              <Option value=\"sms\" >短信</Option>\n              <Option value=\"ding_notice\" >钉钉工作通告</Option>\n              <Option value=\"ding_group\" >钉钉群通知</Option>\n              <Option value=\"ding_robot\" >钉钉机器人</Option>\n              <Option value=\"ding_record\" >钉钉待办</Option>\n            </Select>\n          </Form.Item>\n\n          {\n            style == \"mail\" && <>\n              <Form.Item\n                label=\"发件人\"\n                rules={[{ required: true }]}\n                name=\"name\"\n              >\n                <Select\n                  placeholder=\"请选择发件人\"\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                  onChange={(e) => this.state.theUserName = e.target.value}\n                  className=\"selectStyle\"\n                  onFocus={this.onFocusUser}\n                >\n                  {userChildren}\n                </Select>\n              </Form.Item>\n\n\n              <Form.Item\n                label=\"收件人\"\n                name=\"to\"\n                rules={[{ required: true }]}\n              >\n                <Input\n                  placeholder=\"xxxx@ximalaya.com\"\n                  // onChange={this.handleToWhoChange.bind(this)}\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                />\n              </Form.Item>\n\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n\n              >\n                <Radio.Group\n                  onChange={e => { this.setState({ cronChange: true }); if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n\n              <Form.Item\n                label=\"正文\"\n                name=\"www\"\n                rules={[{ required: true }]}\n                initialValue={[tpl_id, tpl_id]}\n              >\n                <Cascader\n                  options={mailChildren}\n                  style={{ width: 400 }}\n                  placeholder=\"请选择正文\"\n                  notFoundContent=\"暂无模板\"\n                  onFocus={this.onFocusMail}\n                  onChange={this.MailCopyChange}\n                />\n              </Form.Item>\n\n\n            </>\n          }\n          {\n            style == \"sms\" && <>\n              <Form.Item\n                label=\"接收方\"\n                name=\"to\"\n                rules={[{ required: true }]}\n              >\n                <Input\n                  placeholder=\"请输入接收方\"\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n              >\n                <Radio.Group\n                  onChange={e => { this.setState({ cronChange: true }); if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n              {\n                this.state.styleFlowState == \"111\" &&\n                <>\n                  <Form.Item\n                    label=\"正文\"\n                    name=\"www\"\n                    rules={[{ required: true }]}\n                    initialValue={[tpl_id, tpl_id]}\n                  >\n                    <Cascader\n                      options={SMSChildren}\n                      style={{ width: 400 }}\n                      placeholder=\"请选择正文\"\n                      notFoundContent=\"暂无模板\"\n                      onFocus={this.onFocusSMS}\n                      onChange={this.SMSCopyChange}\n                    />\n                  </Form.Item>\n                </>\n              }\n            </>\n          }\n          {\n            style == \"ding_notice\" && <>\n              <Form.Item\n                label=\"接收对象\"\n                name=\"is_at_all\"\n                rules={[{ required: true }]}\n                style={{ minHeight: 10 }}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  onChange={e => { console.log(e); this.setState({ is_at_all: e }) }}\n                  className=\"selectStyle\"\n                // defaultValue={12}\n                >\n                  <Option value={true} disabled>@所有人</Option>\n                  <Option value={false} >@指定的人</Option>\n                </Select>\n              </Form.Item>\n              {\n                this.state.is_at_all == false &&\n\n                <Form.Item\n                  label=\"被@的人\"\n                  name=\"user_id_list\"\n                  rules={[{ required: true }]}\n\n                >\n                  <Input\n                    placeholder=\"工号\"\n                    // value={toWhoValue}\n                    // onChange={this.handleToWhoChange.bind(this)}\n                    style={{ width: 400, height: 40, borderRadius: 5 }}\n                  />\n                </Form.Item>\n              }\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n\n              >\n                <Radio.Group\n                  onChange={e => { this.setState({ cronChange: true }); if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n              {\n                true &&\n                <>\n                  <Form.Item\n                    label=\"正文\"\n                    name=\"www\"\n                    rules={[{ required: true }]}\n                    initialValue={[tpl_id, tpl_id]}\n                  >\n                    <Cascader\n                      options={noticeChildren}\n                      style={{ width: 400 }}\n                      placeholder=\"请选择正文\"\n                      notFoundContent=\"暂无模板\"\n                      onFocus={this.onFocusNotice}\n                    />\n                  </Form.Item>\n                </>\n\n              }\n            </>\n\n          }\n          {\n            style == \"ding_group\" && <>\n              <Form.Item\n                label=\"发送方\"\n                name=\"chat_id\"\n                rules={[{ required: true }]}\n              >\n                <Input\n                  placeholder=\"请输入发送方\"\n                  // value={theUser2Name}\n                  // onChange={this.handleUser2Change.bind(this)}\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                />\n\n              </Form.Item>\n\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n\n              >\n                <Radio.Group\n                  onChange={e => { this.setState({ cronChange: true }); if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n\n              {\n                true &&\n                <>\n                  <Form.Item\n                    label=\"正文\"\n                    name=\"www\"\n                    rules={[{ required: true }]}\n                    initialValue={[tpl_id, tpl_id]}\n                  >\n                    <Cascader\n                      options={groupChildren}\n                      style={{ width: 400 }}\n                      placeholder=\"请选择正文\"\n                      notFoundContent=\"暂无模板\"\n                      onFocus={this.onFocusGroup}\n                    />\n                  </Form.Item>\n                </>\n\n              }\n            </>\n          }\n\n          {\n            style == \"ding_robot\" && <>\n              <Form.Item\n                label=\"发送方\"\n                name=\"webhook\"\n                rules={[{ required: true }]}\n              >\n                <Input\n                  placeholder=\"请输入发送方\"\n                  // value={webhook}\n                  // onChange={this.handleWebhookChange.bind(this)}\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                />\n\n              </Form.Item>\n\n              <Form.Item\n                label=\"密钥\"\n                name=\"secret\"\n              >\n                <Input\n                  placeholder=\"请输入密钥\"\n                  style={{ width: 400, height: 40, borderRadius: 5 }}\n                />\n              </Form.Item>\n\n              <Form.Item\n                label=\"发送对象\"\n                name=\"atflowState\"\n                rules={[{ required: true }]}\n                style={{ minHeight: 10 }}\n                initialValue={this.state.atflowState}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  className=\"selectStyle\"\n                  onChange={e => this.setState({ atflowState: e })}\n                >\n                  <Option value={10} >不@任何人</Option>\n                  <Option value={11} >@所有人</Option>\n                  <Option value={12} >@指定的人</Option>\n                </Select>\n              </Form.Item>\n              {\n                this.state.atflowState == 12 &&\n\n                <Form.Item\n                  label=\"被@的人\"\n                  name=\"user_id_list\"\n                  rules={[{ required: true }]}\n                >\n                  <Input\n                    placeholder=\"工号\"\n                    // value={toWhoValue}\n                    // onChange={this.handleToWhoChange.bind(this)}\n                    style={{ width: 400, height: 40, borderRadius: 5 }}\n                  />\n                </Form.Item>\n              }\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n\n              >\n                <Radio.Group\n                  onChange={e => { if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n\n              {\n                true &&\n                <>\n                  <Form.Item\n                    label=\"正文\"\n                    name=\"www\"\n                    rules={[{ required: true }]}\n                    initialValue={[tpl_id, tpl_id]}\n                  >\n                    <Cascader\n                      options={robotChildren}\n                      style={{ width: 400 }}\n                      placeholder=\"请选择正文\"\n                      notFoundContent=\"暂无模板\"\n                      onFocus={this.onFocusRobot}\n                    />\n                  </Form.Item>\n                </>\n\n              }\n            </>\n          }\n\n          {\n            style == \"ding_record\" && <>\n              <Form.Item\n                label=\"待办方式\"\n                name=\"is_alone\"\n                rules={[{ required: true }]}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  onChange={e => { this.setState({ recordFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={false} >协作待办</Option>\n                  <Option value={true} >独立待办</Option>\n\n                </Select>\n              </Form.Item>\n\n              {\n                this.state.recordFlowState === false && <>\n                  <Form.Item\n                    label=\"执行者\"\n                    name=\"user_id_list\"\n\n                    rules={[\n                      {\n                        required: true\n                      },\n                    ]}\n                  >\n                    <Input\n                      placeholder=\"请输入接收方\"\n                      // value={toWhoValue}\n                      // onChange={this.handleToWhoChange.bind(this)}\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"参与者\"\n                    name=\"participant_id_list\"\n                  >\n                    <Input\n                      placeholder=\"请输入参与者\"\n                      // value={toWhoValue}\n                      // onChange={this.handleToWhoChange.bind(this)}\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"逾期时间\"\n                    name=\"due_timedelta\"\n                  >\n                    <Input\n                      placeholder=\"请输入逾期时间\"\n                      // value={toWhoValue}\n                      // onChange={this.handleToWhoChange.bind(this)}\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n\n                </>\n              }\n              {\n                this.state.recordFlowState === true && <>\n                  <Form.Item\n                    label=\"执行者\"\n                    name=\"user_id_list\"\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"请输入执行者\"\n                      // value={toWhoValue}\n                      // onChange={this.handleToWhoChange.bind(this)}\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                </>\n              }\n\n              <Form.Item\n                label=\"发送方式\"\n                name=\"send_style\"\n                rules={[{ required: true }]}\n                initialValue={send_style}\n\n              >\n                <Radio.Group\n                  onChange={e => { if (e.target.value == 3) { this.setState({ is_periodic_tasks: true }) } else { this.setState({ is_periodic_tasks: false }) }; }}\n                >\n                  <Radio value={1}>仅创建</Radio>\n                  <Radio value={2}>创建并发送</Radio>\n                  <Radio value={3}>周期发送</Radio>\n\n                </Radio.Group>\n              </Form.Item>\n\n              {\n                this.state.is_periodic_tasks == true && <>\n                  <Form.Item\n                    label=\"定时规则\"\n                    name='crontab_info'\n                    rules={[{ required: true }]}\n                  >\n                    <Input\n                      placeholder=\"Cron 表达式\"\n                      style={{ width: 400, height: 40, borderRadius: 5 }}\n                    />\n                  </Form.Item>\n                  <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                    <Col sm={4}></Col>\n                    <Col sm={20}>\n                      <Popover\n                        className=\"shili\"\n                        placement=\"right\"\n                        content={this.cronExample}\n                        trigger=\"click\"\n                      >\n                        <span>示例</span>\n                      </Popover>\n                    </Col>\n                  </Row>\n                </>\n              }\n\n              <Form.Item\n                label=\"编辑方式\"\n                name=\"edit-style\"\n                rules={[{ required: true }]}\n                initialValue={111}\n              >\n                <Select\n                  style={{ width: 400 }}\n                  // onChange={e => { this.setState({ styleFlowState: e }) }}\n                  className=\"selectStyle\"\n                >\n                  <Option value={111} >模版导入</Option>\n                  <Option value={112} disabled>手动输入</Option>\n\n                </Select>\n              </Form.Item>\n\n              {\n                true &&\n                <>\n                  <Form.Item\n                    label=\"正文\"\n                    name=\"www\"\n                    rules={[{ required: true }]}\n                    initialValue={[tpl_id, tpl_id]}\n                  >\n                    <Cascader\n                      options={recordChildren}\n                      style={{ width: 400 }}\n                      placeholder=\"请选择正文\"\n                      notFoundContent=\"暂无模板\"\n                      onFocus={this.onFocusRecord}\n                    />\n                  </Form.Item>\n\n\n                </>\n\n              }\n\n            </>\n          }\n\n        </Form>\n      </Modal>\n\n\n\n    );\n\n  }\n\n  handleCancel = () => {\n    const { onCancel } = this.props\n\n    this.editFormRef.current.resetFields();\n    onCancel();\n  }\n\n  handleOk = () => {\n    const { item = {}, onOk } = this.props\n    const { id, content_format, data } = this.props.currentRowData\n\n\n    this.editFormRef.current.validateFields()\n      .then(values => {\n        console.log(values);\n        const datas = {\n          ...values,\n          username: this.state.theUserName ? this.state.theUserName : data.username ? data.username : \"\",\n          atflowState: this.state.atflowState\n        }\n        onOk(id, datas)\n      }\n      )\n      .catch(errorInfo => {\n        console.log(errorInfo)\n      })\n  }\n}\n\n\n\n\n","import apis from \"../../utils/api/unsplash/index\";\nimport React, { Component, useState } from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport { Table, Form, Button, Input, Divider, Modal, Dropdown, message, Row, Col, Popover, Select, Space, Radio, Cascader, Menu } from 'antd';\nimport { SearchOutlined, PlusCircleOutlined, CheckCircleOutlined, CloseCircleOutlined, CaretDownOutlined, ExclamationCircleOutlined, DoubleRightOutlined, PlusOutlined, HistoryOutlined } from '@ant-design/icons';\n// import ListsComponent from \"../../components/ListComponent\";\nimport './task.scss';\nimport EditForm from \"./forms/editForm\"\nimport \"codemirror/lib/codemirror.css\";\nimport \"@toast-ui/editor/dist/toastui-editor.css\";\nimport { Editor } from \"@toast-ui/react-editor\";\n\nimport { NavLink } from \"react-router-dom\";\n// import {bus} from \"./bus\";\n\n\n\n\n\nconst { confirm } = Modal;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nexport default class MyTask extends Component {\n    state = {\n        dataSource: [],\n        pagination: {\n            current: 1,\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: null,\n            position: 'bottomRight'\n\n        },\n        current: \"\",//目前正在查看的item id\n\n        visible: false,\n        visibleDetail: false,\n        flowState: '',\n        styleFlowState: 1,\n        RadioFlowState: true,//false的时候显示定时\n        atflowState: '',\n\n\n        // 要传输的数据（共同\n        titleValue: '',\n        tpl_id: '',\n        cronValue: '',\n        //邮件\n        toWhoValue: '',  //收件人\n        theUserName: '', //发件人\n        cc: '',\n        bcc: '',\n        //dingdingRobot\n        webhook: '',  //机器人地址\n        is_at_all: false,\n        // user_id_list: [],\n        theUser2Name: '',\n        is_run_now: false,\n        is_periodic_tasks: false,\n\n        mailDateSource: [],\n        SMSDateSource: [],\n        userDateSource: '',\n        robotDateSource: [],\n        groupDateSource: [],\n        noticeDateSource: [],\n        recordDateSource: [],\n\n        detail: {\n            tpl: {\n                title: ''\n            },\n            reason: '',\n            data: {\n                webhook: '',\n                name: '',\n                agent_id: '',\n                chat_id: '',\n\n            }\n        },\n\n\n        editVisible: false,\n        transferVisible: false,\n        editLoading: false,\n        currentRowData: {\n            id: ''\n        },\n        addUserModalVisible: false,\n        addUserModalLoading: false,\n\n        myKey: \"\",\n\n        filter_fields: {},\n\n        searchText: '',\n        searchedColumn: '',\n        searchArr: {},\n        searchData: {},\n        choice: [],\n        transferId: '',\n    }\n\n    pageChange = (page, size) => {\n        this.state.current = page\n        this.state.pageSize = size\n        this.getRefresh()\n    }\n\n    componentDidMount() {\n        apis.getTask({\n            page: this.state.pagination.current,\n            page_size: this.state.pagination.pageSize\n        }).then(res => {\n            this.setState({\n                dataSource: res.data.results,\n                pagination: {\n                    current: res.data.page,\n                    pageSize: res.data.page_size,\n                    showSizeChanger: true,\n                    showQuickJumper: true,\n                    total: res.data.total,\n                    showTotal: (total) => `共加载 ${total} 个`,\n                    onChange: this.pageChange,\n                    position: 'bottomRight'\n                },\n                filter_fields: res.data.filter_fields,\n            })\n            if (this.state.filter_fields.length !== 0) {\n                let dataArr = {};\n                let arr = this.state.filter_fields.map(ele => {\n                    dataArr[ele.value] = [];\n                    return ele.name;\n                });\n                if (Object.keys(this.state.searchArr).length === 0) {\n                    this.state.searchArr = dataArr;\n                }\n            }\n            this.state.choice = this.state.filter_fields[2].choice\n            console.log(this.state.searchArr)\n        })\n    };\n\n\n    searchInput = []\n\n    getColumnSearchProps = (dataIndex, title) => {\n        let filterDropdown = '';\n        if (dataIndex === \"style\") {\n            filterDropdown = (\n                <Form\n                    ref={node => {\n                        this.searchInput[`${dataIndex}`] = node;\n                    }}\n                    style={{ width: 200, marginBottom: 0 }}\n                >\n                    <Form.Item\n                        name=\"search\"\n                        style={{ marginBottom: 8, marginTop: 5 }}\n\n                    >\n                        <Select\n                            showSearch\n                            allowClear\n                            value={this.state.searchArr[`${dataIndex}`] ? this.state.searchArr[`${dataIndex}`] : ''}\n                            style={{ width: 188 }}\n                            placeholder={`搜索 ${title}`}\n                            optionFilterProp=\"children\"\n                            onSelect={(e) => this.handleSearch(e, dataIndex)}\n                            filterOption={(input, option) =>\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                            }\n                        >\n\n                            <Option value=\"ding_record\">钉钉待办</Option>\n                            <Option value=\"ding_robot\">钉钉机器人</Option>\n                            <Option value=\"ding_group\">钉钉群通知</Option>\n                            <Option value=\"ding_notice\">钉钉工作通告</Option>\n                            <Option value=\"mail\">邮件</Option>\n                            <Option value=\"sms\">短信</Option>\n\n\n                            {/* {\n                                this.state.choice.map(ele => {\n                                    return <Option value={ele}>{ele}</Option>;\n                                })\n                            } */}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            );\n        } else if (dataIndex === \"is_periodic_tasks\") {\n            filterDropdown = (\n                <Form\n                    ref={node => { this.searchInput[`${dataIndex}`] = node; }}\n                    style={{ width: 200 }}\n                >\n                    <Form.Item name='search'>\n                        <Radio.Group\n                            style={{ display: 'block' }}\n                            onChange={(e) => { this.state.searchArr[dataIndex] = e.target.value; }}\n                        >\n                            <Radio style={{ display: 'inline', margin: 30 }} value={true}>是</Radio>\n                            <Radio style={{ display: 'inline' }} value={false}>否</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                </Form>\n            )\n        }\n\n        else {\n            filterDropdown = (\n                <Input\n                    ref={node => {\n                        this.searchInput[dataIndex] = node;\n                    }}\n                    prefix={<SearchOutlined style={{ color: '#B1B1B1', fontSize: '12px' }} />}\n                    placeholder={`搜索 ${title}`}\n                    onChange={e => this.handleSearch(e, dataIndex)}\n                    onPressEnter={e => this.handleSearch(e, dataIndex)}\n                    style={{ marginBottom: 8, marginTop: 5 }}\n                />\n            )\n        }\n        return ({\n            filterDropdown: (\n                <div style={{ width: ' 200px', height: '97px', padding: 8, boxShadow: ' 0px 2px 4px 1px rgba(0,0,0,0.5)', borderRadius: '5px' }}>\n                    {filterDropdown}\n                    <Space>\n                        <Button\n                            onClick={(e) => this.handleReset(e, dataIndex)}\n                            size=\"small\"\n                            style={{ width: '67px', height: '21px', background: '##FFFFFF', border: '1px solid #DADADA', borderRadius: '5px', fontSize: '12px', margin: '12px' }}\n                        >\n                            重置\n                    </Button>\n                        <Button\n                            type=\"primary\"\n                            onClick={() => this.search()}\n                            icon={<SearchOutlined />}\n                            size=\"small\"\n                            style={{ width: '67px', height: '21px', background: '#40404C', border: '1px solid #40404C', borderRadius: '5px', fontSize: '12px', color: '#FFFFFF' }}\n                        >\n                            搜索\n                    </Button>\n                    </Space>\n                </div>\n            ),\n            filterIcon: <SearchOutlined style={{ color: '#D8D8D8' }} />,\n            render: (text) => {\n                if (dataIndex === \"style\") {\n\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.styleEtoC(this.state.searchData[dataIndex])]}\n                                autoEscape\n                                textToHighlight={this.styleEtoC(text) ? this.styleEtoC(text).toString() : ''}\n                            />\n                        </>\n                    } else { return this.styleEtoC(text) }\n                } else if (dataIndex === \"is_periodic_tasks\") {\n\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.state.searchData[dataIndex] ? \"是\" : \"否\"]}\n                                autoEscape\n                                textToHighlight={text ? \"是\" : \"否\" ? text ? \"是\" : \"否\".toString() : ''}\n                            />\n                        </>\n                    } else { return text ? \"是\" : \"否\" }\n                }\n                else {\n                    if (this.state.searchData.hasOwnProperty(dataIndex)) {\n                        return <>\n                            <Highlighter\n                                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                                searchWords={[this.state.searchData[dataIndex]]}\n                                autoEscape\n                                textToHighlight={text ? text.toString() : ''}\n                            />\n                        </>\n                    } else { return <>{text}</> }\n                }\n\n            }\n\n        })\n    }\n\n    // getColumnSearchProps = (dataIndex, title) => ({\n    //     filterDropdown: (\n    //         <div style={{ padding: 8 }}>\n    //             <Input\n    //                 ref={node => {\n    //                     this.searchInput[dataIndex] = node;\n    //                 }}\n    //                 placeholder={`搜索 ${title}`}\n    //                 onChange={e => this.handleSearch(e, dataIndex)}\n    //                 onPressEnter={e => this.handleSearch(e, dataIndex)}\n    //                 style={{ marginBottom: 8, display: 'block' }}\n    //             />\n    //             <Space>\n    //                 <Button\n    //                     type=\"primary\"\n    //                     onClick={() => this.search()}\n    //                     icon={<SearchOutlined />}\n    //                     size=\"small\"\n    //                     style={{ width: 90 }}\n    //                 >\n    //                     搜索\n    //                 </Button>\n    //                 <Button onClick={(e) => this.handleReset(e, dataIndex)} size=\"small\" style={{ width: 90 }}>\n    //                     重置\n    //                 </Button>\n\n    //             </Space>\n    //         </div>\n    //     ),\n    //     filterIcon: <SearchOutlined style={{ color: '#1890ff' }} />,\n    //     render: text => {\n    //         if ( this.state.searchData.hasOwnProperty(dataIndex) ) {\n    //             return <>\n    //                 <Highlighter\n    //                     highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n    //                     searchWords={[this.state.searchData[dataIndex]]}\n    //                     autoEscape\n    //                     textToHighlight={text ? text.toString() : ''}\n    //                 />\n    //             </>\n    //         } else { return <>{text}</> }\n\n    //     }\n\n    // });\n\n    handleSearch = (e, dataIndex) => {\n        if (dataIndex === 'style') {\n            this.state.searchArr[dataIndex] = [e]\n        } else {\n            this.state.searchArr[dataIndex] = [e.target.value]\n        }\n        // this.state.searchedColumn = dataIndex\n    };\n\n    search = () => {\n        let arr = this.state.searchArr;\n        let searchDataBefore = {};\n        this.state.searchData = {};\n\n        for (let key in arr) {\n            searchDataBefore[`${key}`] = arr[key].toString();\n        }\n        for (let i in searchDataBefore) {\n            if (searchDataBefore[i]) {\n                this.state.searchData[i] = searchDataBefore[i]\n            }\n        }\n        console.log(this.state.searchData);\n        this.getRefresh();\n    }\n\n\n    handleReset = (e, dataIndex) => {\n        // this.searchInput[dataIndex].handleReset(e);\n        this.state.searchArr[dataIndex] = [];\n        this.search();\n    };\n\n\n\n    //每列名称\n    columns = [\n        {\n            title: \"推送ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n            align: \"center\",\n            width: 150\n        },\n\n        {\n            title: \"uuid\",\n            dataIndex: \"uuid\",\n            key: \"uuid\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"uuid\", \"uuid\"),\n\n        },\n        {\n            title: \"推送名称\",\n            key: \"title\",\n            dataIndex: \"title\",\n            align: \"center\",\n            width: 200,\n            ...this.getColumnSearchProps(\"title\", \"推送名称\"),\n        },\n        {\n            title: \"推送类型\",\n            key: \"style\",\n            dataIndex: \"style\",\n            align: \"center\",\n            width: 150,\n            ...this.getColumnSearchProps(\"style\", \"推送类型\"),\n        },\n        {\n            title: \"周期发送\",\n            key: \"is_periodic_tasks\",\n            dataIndex: \"is_periodic_tasks\",\n            align: \"center\",\n            width: 120,\n            render: (val) =>\n                val ? <CheckCircleOutlined style={{ fontSize: '17px', color: '#0073E1 ' }} /> : <CloseCircleOutlined style={{ fontSize: '17px', color: '#B1B1B1 ' }} />\n\n            // ...this.getColumnSearchProps(\"is_periodic_tasks\", \"周期发送\"),\n        },\n        {\n            title: \"推送次数\",\n            key: \"count\",\n            dataIndex: \"count\",\n            align: \"center\",\n            width: 100,\n\n        },\n\n        {\n            title: \"操作\",\n            key: \"handle\",\n            align: \"center\",\n            width: 200,\n            fixed: 'right',\n            render: (obj) => {\n                return <>\n                    <Button className=\"handle-button\" onClick={(e) => this.handleDetail(e, obj)}>详情</Button>\n                    {/* <Button className=\"handle-button\">发送</Button> */}\n                    {/* <Button className=\"handle-button\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Button> */}\n\n                    <NavLink target=\"_blank\" to={`/task/history?id=${obj.id}`}>\n                        <Button className=\"handle-button\">历史</Button>\n                    </NavLink>\n                    {/* <Button className=\"handle-button\" onClick={(e) => this.handleDelete(e, obj)}>删除</Button> */}\n                    <Dropdown overlay={\n                        <Menu>\n                            <Menu.Item key=\"0\" onClick={(e) => this.handleSend(e, obj)}>发送</Menu.Item>\n                            <Menu.Item key=\"1\" onClick={(e) => this.handleEdit(e, obj)}>编辑</Menu.Item>\n                            <Menu.Item key=\"2\" onClick={(e) => this.handleDelete(e, obj)}>删除</Menu.Item>\n                            <Menu.Item key=\"3\" onClick={(e) => this.handleTransfer(e, obj)}>转让</Menu.Item>\n\n\n                        </Menu>\n                    }>\n                        {/* <div style={{display: 'inline-block'}}>\n                              <a  onClick={e => e.preventDefault()}>\n                              <DoubleRightOutlined />\n                             </a>\n                              </div> */}\n                        <Button className=\"handle-button\" onClick={e => e.preventDefault()}>  <DoubleRightOutlined /></Button>\n                    </Dropdown>\n                </>\n            }\n        },\n    ];\n\n    cronExample = (\n        <div>\n            <p>https://cron.qqe2.com/ </p>\n            <p>https://tool.lu/crontab</p>\n            <p>https://mviess.de/sysadm/crontabmaker/index.php</p>\n        </div>\n    );\n\n    formRef = React.createRef();\n    transFormRef = React.createRef();\n\n\n    handleTitleChange(e) {\n        this.setState({\n            titleValue: e.target.value\n        })\n    }\n\n    handleToWhoChange(e) {\n        this.setState({\n            toWhoValue: e.target.value\n        })\n    }\n\n    handleUserChange(e) {\n        this.setState({\n            theUserName: e\n        })\n    }\n\n    handleUser2Change(e) {\n        this.setState({\n            theUser2Name: e.target.value\n        })\n    }\n\n    handleWebhookChange(e) {\n        this.setState({\n            webhook: e.target.value\n        })\n    }\n\n    handleCronChange(e) {\n        console.log(e)\n        this.setState({\n            cronValue: e.target.value\n        })\n    }\n\n    handleRadioChange(val) {\n        if (val.target.value == 1) {\n            this.setState({\n                is_periodic_tasks: false,\n                is_run_now: false,\n            })\n        }\n        if (val.target.value == 2) {\n            this.setState({\n                is_periodic_tasks: false,\n                is_run_now: true\n            })\n        }\n        if (val.target.value == 3) {\n            // console.log(\"zqfs\")\n            this.setState({\n                is_periodic_tasks: true,\n                is_run_now: false,\n            })\n        }\n\n    }\n\n\n    onFocusMail = (e) => {\n        let that = this;\n        apis.getMailbox({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data.results)\n                that.setState({\n                    mailDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusSMS = (e) => {\n        let that = this;\n        apis.getSMS({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data)\n                that.setState({\n                    SMSDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusRobot = (e) => {\n        let that = this;\n        apis.getDingRobot({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    robotDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusGroup = (e) => {\n        let that = this;\n        apis.getDingGroup({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    groupDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusNotice = (e) => {\n        let that = this;\n        apis.getDingNotice({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    noticeDateSource: res.data.results\n                });\n                // console.log(this.state.noticeDateSource)\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    };\n\n    onFocusRecord = (e) => {\n        let that = this;\n        apis.getDingRecord({\n            page: '1',\n            // size: this.state.pageSize,\n            // ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data)\n                that.setState({\n                    recordDateSource: res.data.results\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    onFocusUser = (e) => {\n        let that = this;\n        apis.getUser().then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                // console.log(res.data.results)\n                that.setState({\n                    userDateSource: res.data\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    MailCopyChange = (val, op) => {\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    SMSCopyChange = (val, op) => {\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    RobotCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    GroupCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    NoticeCopyChange = (val, op) => {\n        // console.log(val,op)\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    RecordCopyChange = (val, op) => {\n        this.setState({\n            tpl_id: op[0].value\n        })\n    }\n\n    styleEtoC = (val) => {\n        if (val == \"ding_group\") {\n            return \"钉钉群通知\"\n        } else if (val == \"ding_robot\") {\n            return \"钉钉机器人\"\n        } else if (val == \"ding_notice\") {\n            return \"钉钉工作通告\"\n        } else if (val == \"ding_record\") {\n            return \"钉钉待办\"\n        } else if (val == \"mail\") {\n            return \"邮件\"\n        } else if (val == \"sms\") {\n            return \"短信\"\n        } else if (val == \"tel\") {\n            return \"电话\"\n        } else {\n            return \"未知类型\"\n        }\n    }\n\n    render() {\n        const { titleValue, toWhoValue, webhook, RadioFlowState, cronValue, theUser2Name, myKey } = this.state\n\n        const userChildren = [];\n        for (let i = 0; i < this.state.userDateSource.length; i++) {\n            userChildren.push(<Option key={this.state.userDateSource[i].value} children>{this.state.userDateSource[i].name}</Option>);\n        }\n\n\n        const mailChildren = [];\n        for (let i = 0; i < this.state.mailDateSource.length; i++) {\n            mailChildren.push({\n                value: this.state.mailDateSource[i].id,\n                label: this.state.mailDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.mailDateSource[i].content.content,\n                        label: this.state.mailDateSource[i].content.content,\n                    }\n                ]\n            })\n        };\n\n        const SMSChildren = [];\n        for (let i = 0; i < this.state.SMSDateSource.length; i++) {\n            SMSChildren.push({\n                value: this.state.SMSDateSource[i].id,\n                label: this.state.SMSDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.SMSDateSource[i].content.content,\n                        label: this.state.SMSDateSource[i].content.content,\n                    }\n                ]\n            })\n        };\n\n        const robotChildren = [];\n        for (let i = 0; i < this.state.robotDateSource.length; i++) {\n            this.state.robotDateSource[i].content_format === \"text\" ? robotChildren.push({\n                value: this.state.robotDateSource[i].id,\n                label: this.state.robotDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.robotDateSource[i].content.content,\n                        label: this.state.robotDateSource[i].content.content,\n                    }\n                ]\n            }) :\n                robotChildren.push({\n                    value: this.state.robotDateSource[i].id,\n                    label: this.state.robotDateSource[i].title,\n                    children: [\n                        {\n                            value: this.state.robotDateSource[i].content.text,\n                            label: this.state.robotDateSource[i].content.text,\n                        }\n                    ]\n                })\n        };\n\n        const noticeChildren = [];\n        for (let i = 0; i < this.state.noticeDateSource.length; i++) {\n            this.state.noticeDateSource[i].content_format === \"text\" ? noticeChildren.push({\n                value: this.state.noticeDateSource[i].id,\n                label: this.state.noticeDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.noticeDateSource[i].content.content,\n                        label: this.state.noticeDateSource[i].content.content,\n                    }\n                ]\n            }) :\n                noticeChildren.push({\n                    value: this.state.noticeDateSource[i].id,\n                    label: this.state.noticeDateSource[i].title,\n                    children: [\n                        {\n                            value: this.state.noticeDateSource[i].content.text,\n                            label: this.state.noticeDateSource[i].content.text,\n                        }\n                    ]\n                })\n        };\n\n        const groupChildren = [];\n        for (let i = 0; i < this.state.groupDateSource.length; i++) {\n            this.state.groupDateSource[i].content_format === \"text\" ? groupChildren.push({\n                value: this.state.groupDateSource[i].id,\n                label: this.state.groupDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.groupDateSource[i].content.content,\n                        label: this.state.groupDateSource[i].content.content,\n                    }\n                ]\n            }) :\n                groupChildren.push({\n                    value: this.state.groupDateSource[i].id,\n                    label: this.state.groupDateSource[i].title,\n                    children: [\n                        {\n                            value: this.state.groupDateSource[i].content.text,\n                            label: this.state.groupDateSource[i].content.text,\n                        }\n                    ]\n                })\n        };\n\n        const recordChildren = [];\n        for (let i = 0; i < this.state.recordDateSource.length; i++) {\n            recordChildren.push({\n                value: this.state.recordDateSource[i].id,\n                label: this.state.recordDateSource[i].title,\n                children: [\n                    {\n                        value: this.state.recordDateSource[i].content.content,\n                        label: this.state.recordDateSource[i].content.content,\n                    }\n                ]\n            })\n        };\n\n        return (\n            <div className=\"app-container\">\n                <Divider >\n                    <HistoryOutlined />  推送任务\n                </Divider>\n\n                {/*新建按钮*/}\n                {/* <div height=\"30px\" width=\"100%\"  >\n                    <Button className=\"new-button\" type=\"primary\" onClick={this.showModal} htmlType=\"submit\">\n                        新建推送\n                    </Button>\n                </div> */}\n\n                {/* 下方表格 */}\n                {/* <Table\n                    columns={this.columns}\n                    dataSource={this.state.dataSource}\n                    pagination={this.state.pagination}\n                    scroll={{ y: 'calc(100vh - 280px)' }}\n                /> */}\n                {/* 下方表格 */}\n                <div style={{ position: 'relative' }}>\n                    <div style={{ position: 'absolute', left: 35, top: 37, zIndex: 1 }}>\n                        <PlusCircleOutlined style={{ fontSize: \"15px\", color: \"#000000\" }} onClick={this.showModal} />\n                    </div>\n                    <Table\n                        columns={this.columns}\n                        dataSource={this.state.dataSource}\n                        pagination={this.state.pagination}\n                        scroll={{ y: 'calc(100vh - 280px)', x: '100%' }}\n\n                    />\n                </div>\n\n\n                {/* 新建模板弹出框 */}\n                <Modal\n                    title=\"新建推送\"\n                    width=\"645px\"\n                    visible={this.state.visible}\n                    onOk={this.onFinish}\n                    onCancel={this.handleCancel}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    okText=\"执行\"\n                    cancelText=\"取消\"\n                    bodyStyle={{ height: '580px', overflowY: 'auto', marginLeft: '45px' }}\n                    destroyOnClose={true}\n                    key={myKey}\n                >\n\n                    <Form\n                        className=\"addModel\"\n                        name=\"basic\"\n                        onFinish={this.onFinish}\n                        ref={this.formRef}\n                        labelCol={{ span: 4 }}\n                    >\n\n                        {/* 标题栏 */}\n                        <Form.Item\n                            label=\"推送名称\"\n                            name=\"title\"\n                            rules={[\n                                {\n                                    required: true,\n                                    validator: (_, value, callback) => {\n                                        if (!titleValue) {\n                                            callback('请输入推送名称')\n                                        } else {\n                                            callback()\n                                        }\n                                    }\n                                },\n\n                            ]}\n                        >\n                            <Input\n                                placeholder=\"请输入推送名称\"\n                                value={titleValue}\n                                onChange={this.handleTitleChange.bind(this)}\n                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                            />\n                        </Form.Item>\n\n\n                        <Form.Item\n                            label=\"推送类型\"\n                            name=\"style\"\n                            rules={[{ required: true }]}\n                        >\n                            <Select\n                                style={{ width: 400 }}\n                                onChange={e => { this.setState({ flowState: e }) }}\n                                className=\"selectStyle\"\n                            >\n                                <Option value={1} >邮件</Option>\n                                <Option value={2} >短信</Option>\n                                <Option value={3} >钉钉工作通告</Option>\n                                <Option value={4} >钉钉群通知</Option>\n                                <Option value={5} >钉钉机器人</Option>\n                                <Option value={6} >钉钉待办</Option>\n                            </Select>\n                        </Form.Item>\n\n\n\n                        {\n                            this.state.flowState == '1' &&\n                            <>\n                                <Form.Item\n                                    label=\"发件人\"\n                                    name=\"mail-1\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        placeholder=\"请选择发件人\"\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        onChange={this.handleUserChange.bind(this)}\n                                        className=\"selectStyle\"\n                                        onFocus={this.onFocusUser}\n                                    >\n                                        {userChildren}\n                                    </Select>\n                                </Form.Item>\n\n\n                                <Form.Item\n                                    label=\"收件人\"\n                                    name=\"mail-3\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"xxxx@ximalaya.com\"\n                                        value={toWhoValue}\n                                        onChange={this.handleToWhoChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n                                </Form.Item>\n\n                                {/* <Form.Item\n                                label=\"\"\n                                name=\"mail-4\"\n                                rules={[\n                                    {\n                                        required: true\n                                    },\n                                ]}\n                                style={{minHeight: 10}}\n                            >\n                                \n                            </Form.Item> */}\n\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"xxx\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n                                {\n                                    (this.state.is_periodic_tasks == true) && <>\n                                        <Form.Item\n                                            label=\"定时规则\"\n                                            name=\"cron\"\n\n                                            rules={[{ required: true }]}\n                                        >\n                                            <Input\n                                                placeholder=\"Cron 表达式\"\n                                                value={cronValue}\n                                                onChange={this.handleCronChange.bind(this)}\n                                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                                            />\n                                        </Form.Item>\n                                        <Row style={{ marginBottom: 24, marginTop: -24 }}>\n                                            <Col sm={4}></Col>\n                                            <Col sm={20}>\n                                                <Popover\n                                                    className=\"shili\"\n                                                    placement=\"right\"\n                                                    content={this.cronExample}\n                                                    trigger=\"click\"\n                                                >\n                                                    <span>示例</span>\n                                                </Popover>\n                                            </Col>\n                                        </Row></>\n                                }\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"mail-6\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={mailChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusMail}\n                                                onChange={this.MailCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '2' && <>\n\n                                <Form.Item\n                                    label=\"接收方\"\n                                    name=\"receiver\"\n\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入接收方\"\n                                        value={toWhoValue}\n                                        onChange={this.handleToWhoChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n                                </Form.Item>\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"send-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n                                {\n                                    this.state.is_periodic_tasks == true &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        name=\"rules\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n                                    </Form.Item>\n                                }\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"edit-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={SMSChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusSMS}\n                                                onChange={this.SMSCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '3' &&\n                            <>\n                                {/* <Form.Item\n                                    label=\"发送方\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={theUser2Name}\n                                        onChange={this.handleUser2Change.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item> */}\n\n\n\n                                <Form.Item\n                                    label=\"接收对象\"\n                                    name=\"receiver\"\n\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        className=\"selectStyle\"\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                    // defaultValue={12}\n                                    >\n                                        <Option value={11} disabled>@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState == 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        name=\"whobeat\"\n\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                }\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"send-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    this.state.is_periodic_tasks == true &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        name=\"rules\"\n\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"edit-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={noticeChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusNotice}\n                                                onChange={this.NoticeCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '4' &&\n                            <>\n                                <Form.Item\n                                    label=\"发送方\"\n                                    name=\"theUser2Name\"\n\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={theUser2Name}\n                                        onChange={this.handleUser2Change.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item>\n\n\n\n                                {/* <Form.Item\n                                    label=\"接收对象\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                    >\n                                        <Option value={10} >不@任何人</Option>\n                                        <Option value={11} >@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState== 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                } */}\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"handleRadio\"\n\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    this.state.is_periodic_tasks == true &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        name=\"rule\"\n\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"edit-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={groupChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusGroup}\n                                                onChange={this.GroupCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '5' &&\n                            <>\n                                <Form.Item\n                                    label=\"发送方\"\n                                    name=\"theUser2Name\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Input\n                                        placeholder=\"请输入发送方\"\n                                        value={webhook}\n                                        onChange={this.handleWebhookChange.bind(this)}\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"密钥\"\n                                    name=\"secret\"\n                                >\n                                    <Input\n                                        placeholder=\"请输入密钥\"\n                                        style={{ width: 400, height: 40, borderRadius: 5 }}\n                                    />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"发送对象\"\n                                    name=\"send-object\"\n\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                    style={{ minHeight: 10 }}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        className=\"selectStyle\"\n                                        onChange={e => { this.setState({ atflowState: e }) }}\n                                    >\n                                        <Option value={10} >不@任何人</Option>\n                                        <Option value={11} >@所有人</Option>\n                                        <Option value={12} >@指定的人</Option>\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.atflowState == 12 &&\n\n                                    <Form.Item\n                                        label=\"被@的人\"\n                                        name=\"whobeat\"\n\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"工号\"\n                                            value={toWhoValue}\n                                            onChange={this.handleToWhoChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                    </Form.Item>\n                                }\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"send-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n\n                                {\n                                    this.state.is_periodic_tasks == true &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        name=\"rules\"\n\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n\n                                    </Form.Item>\n                                }\n\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"edit-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[\n                                                {\n                                                    required: true\n                                                },\n                                            ]}\n                                        >\n                                            <Cascader\n                                                options={robotChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusRobot}\n                                                onChange={this.RobotCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n                            </>\n                        }\n\n                        {\n                            this.state.flowState == '6' && <>\n                                <Form.Item\n                                    label=\"待办方式\"\n                                    name=\"is_alone\"\n                                    rules={[{ required: true }]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ recordFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={false} >协作待办</Option>\n                                        <Option value={true} >独立待办</Option>\n\n                                    </Select>\n                                </Form.Item>\n\n                                {\n                                    this.state.recordFlowState === false && <>\n                                        <Form.Item\n                                            label=\"执行者\"\n                                            name=\"user_id_list\"\n                                            rules={[{ required: true }]}\n                                        >\n                                            <Input\n                                                placeholder=\"请输入接收方\"\n                                                // value={toWhoValue}\n                                                // onChange={this.handleToWhoChange.bind(this)}\n                                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                                            />\n                                        </Form.Item>\n                                        <Form.Item\n                                            label=\"参与者\"\n                                            name=\"participant_id_list\"\n                                        >\n                                            <Input\n                                                placeholder=\"请输入参与者\"\n                                                // value={toWhoValue}\n                                                // onChange={this.handleToWhoChange.bind(this)}\n                                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                                            />\n                                        </Form.Item>\n                                        <Form.Item\n                                            label=\"逾期时间\"\n                                            name=\"due_timedelta\"\n                                        >\n                                            <Input\n                                                placeholder=\"请输入逾期时间\"\n                                                // value={toWhoValue}\n                                                // onChange={this.handleToWhoChange.bind(this)}\n                                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                                            />\n                                        </Form.Item>\n\n                                    </>\n                                }\n                                {\n                                    this.state.recordFlowState === true && <>\n                                        <Form.Item\n                                            label=\"执行者\"\n                                            name=\"user_id_list\"\n                                            rules={[{ required: true }]}\n                                        >\n                                            <Input\n                                                placeholder=\"请输入执行者\"\n                                                // value={toWhoValue}\n                                                // onChange={this.handleToWhoChange.bind(this)}\n                                                style={{ width: 400, height: 40, borderRadius: 5 }}\n                                            />\n                                        </Form.Item>\n                                    </>\n                                }\n\n\n                                <Form.Item\n                                    label=\"发送方式\"\n                                    name=\"send-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Radio.Group\n                                        onChange={this.handleRadioChange.bind(this)}\n                                    >\n                                        <Radio value={1}>仅创建</Radio>\n                                        <Radio value={2}>创建并发送</Radio>\n                                        <Radio value={3}>周期发送</Radio>\n\n                                    </Radio.Group>\n                                </Form.Item>\n\n                                {\n                                    this.state.is_periodic_tasks == true &&\n                                    <Form.Item\n                                        label=\"定时规则\"\n                                        name=\"rules\"\n                                        rules={[\n                                            {\n                                                required: true\n                                            },\n                                        ]}\n                                    >\n                                        <Input\n                                            placeholder=\"Cron 表达式\"\n                                            value={cronValue}\n                                            onChange={this.handleCronChange.bind(this)}\n                                            style={{ width: 400, height: 40, borderRadius: 5 }}\n                                        />\n                                        <Popover\n                                            className=\"shili\"\n                                            placement=\"right\"\n                                            content={this.cronExample}\n                                            trigger=\"click\"\n                                        >\n                                            <span>示例</span>\n                                        </Popover>\n                                    </Form.Item>\n                                }\n\n                                <Form.Item\n                                    label=\"编辑方式\"\n                                    name=\"edit-style\"\n                                    rules={[\n                                        {\n                                            required: true\n                                        },\n                                    ]}\n                                >\n                                    <Select\n                                        style={{ width: 400 }}\n                                        onChange={e => { this.setState({ styleFlowState: e }) }}\n                                        className=\"selectStyle\"\n                                    >\n                                        <Option value={111} >模版导入</Option>\n                                        <Option value={112} disabled>手动输入</Option>\n\n                                    </Select>\n                                </Form.Item>\n                                {\n                                    this.state.styleFlowState == \"111\" &&\n                                    <>\n                                        <Form.Item\n                                            label=\"正文\"\n                                            name=\"mbzw\"\n                                            rules={[{ required: true }]}\n                                        >\n                                            <Cascader\n                                                options={recordChildren}\n                                                style={{ width: 400 }}\n                                                placeholder=\"请选择正文\"\n                                                notFoundContent=\"暂无模板\"\n                                                onFocus={this.onFocusRecord}\n                                                onChange={this.RecordCopyChange}\n                                            />\n                                        </Form.Item>\n                                    </>\n\n                                }\n\n                            </>\n                        }\n\n                    </Form>\n\n                </Modal>\n\n                {/* 详情弹窗 */}\n                <Modal\n                    title=\"详情\"\n                    width=\"645px\"\n                    className=\"Detail\"\n                    visible={this.state.visibleDetail}\n                    onCancel={(e) => { this.setState({ visibleDetail: false }) }}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    footer={\n                        [] // 设置footer为空，去掉 取消 确定默认按钮\n                    }\n                    bodyStyle={{ overflowY: 'auto', marginLeft: '45px', padding: \"15px 10% 80px 10%\" }}\n                >\n\n                    <span className=\"title\"> 推送名称：</span>\n                    <span className=\"ans\">{this.state.detail.title}</span>\n                    <br />\n                    <span className=\"title\"> 推送类型：</span>\n                    <span className=\"ans\">{this.state.detail.style == \"ding_group\" ? \"钉钉群通知\" :\n                        this.state.detail.style == \"ding_robot\" ? \"钉钉机器人\" :\n                            this.state.detail.style == \"ding_notice\" ? \"钉钉工作通告\" :\n                                this.state.detail.style == \"ding_record\" ? \"钉钉待办\" :\n                                    this.state.detail.style == \"mail\" ? \"邮件\" :\n                                        this.state.detail.style == \"sms\" ? \"短信\" :\n                                            this.state.detail.style == \"tel\" ? \"电话\" : \"未知类型\"\n\n                    }</span>\n                    <br />\n\n                    <span className=\"title\"> 模板id：</span>\n                    <span className=\"ans\">{this.state.detail.tpl_id}</span>\n                    <br />\n                    <span className=\"title\"> 模板标题：</span>\n                    <span className=\"ans\">{this.state.detail.tpl.title}</span>\n                    <br />\n                    <span className=\"title\"> uuid:</span>\n                    <span className=\"ans\">{this.state.detail.uuid}</span>\n                    <br />\n                    <span className=\"title\"> 发件方：</span>\n                    <span className=\"ans\">{\n                        this.state.detail.style == \"ding_group\" ? this.state.detail.data.chat_id :\n                            this.state.detail.style == \"ding_robot\" ? this.state.detail.data.webhook :\n                                this.state.detail.style == \"ding_notice\" ? this.state.detail.data.agent_id :\n                                    this.state.detail.style == \"mail\" ? this.state.detail.data.name :\n                                        this.state.detail.style == \"sms\" ? \"管理员短信\" :\n                                            this.state.detail.style == \"tel\" ? \"管理员电话\" : \"管理员\"\n                    }</span>\n                    <br />\n                    {/* <span className=\"title\"> 收件方：</span>\n                    <span className=\"ans\">{\"暂无\"}</span>\n                    <br /> */}\n                    <span className=\"title\"> 状态：</span>\n                    <span className=\"ans\">{this.state.detail.status == 1000 ? \"完成\" :\n                        this.state.detail.status == 999 ? \"失败\" :\n                            this.state.detail.status == 300 ? \"执行中\" :\n                                this.state.detail.status == 100 ? \"等待中\" : \"生效\"\n                    }</span>\n                    <br />\n\n                    <span className=\"title\"> 状态原因：</span>\n                    <span className=\"ans\">{this.state.detail.reason}</span>\n                    <br />\n\n                </Modal>\n\n                {/* 编辑弹窗 */}\n                <EditForm\n                    currentRowData={this.state.currentRowData}\n                    visible={this.state.editVisible}\n                    onCancel={this.handleEditCancel}\n                    onOk={this.handleEditOk}\n                />\n\n                {/* 转让弹窗 */}\n                <Modal\n                    title=\"转让\"\n                    width=\"645px\"\n                    visible={this.state.transferVisible}\n                    onCancel={() => { this.setState({ transferVisible: false }) }}\n                    onOk={this.handleTransferOk}\n                    maskStyle={{ background: \"rgba(217,218,217,0.5)\" }}\n                    bodyStyle={{ height: '208px', }}\n                >\n                    <Form ref={this.transFormRef} style={{ margin: \"65px 0 0 50px\" }}>\n                        <Form.Item\n                            label=\"接收人\"\n                            name=\"ding_talk_id\"\n                            rules={[{ required: true }]}\n                        >\n                            <Input\n                                placeholder=\"工号\"\n                                style={{ width: '431px', height: '40px', border: '1px solid #DCDFE6', borderRadius: '4px' }}\n                            />\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </div>\n\n        )\n    }\n\n    getRefresh() {\n        let that = this;\n        apis.getTask({\n            page: this.state.current,\n            page_size: this.state.pageSize,\n            ...this.state.searchData\n        }).then(res => {\n            // console.log(res);\n            if (res.code == 0 || res.code == 200) {\n                that.setState({\n                    dataSource: res.data.results,\n                    pagination: {\n                        current: res.data.page,\n                        pageSize: res.data.page_size,\n                        showSizeChanger: true,\n                        showQuickJumper: true,\n                        total: res.data.total,\n                        onChange: this.pageChange,\n                        showTotal: (total) => `共加载 ${total} 个`,\n                        position: 'bottomRight'\n\n                    }\n                });\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            message.error(err);\n        });\n    }\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n            myKey: Math.random()\n        });\n        // 给Modal添加key，每次弹出的时候 改变key的值，保证每次key的值不同 这里使用了Math.random()\n    };\n\n    handleCancel = (e) => {\n        this.formRef.current.resetFields();\n        this.setState({\n            visible: false,\n        });\n    };\n\n    handleEditOk = (id, data) => {\n        // console.log(\"okk\", data)\n        this.setState({\n            editVisible: false,\n        });\n        // const { form } = this.editFormRef.props;\n        // console.log(form)\n        //     this.editFormRef.current.validateFields((err, values) => {\n        //       if (err) {\n        //         return;\n        //       }\n        //   console.log(values)\n        let values = {\n            title: data.title,\n            tpl_id: data.www[0],\n            style: data.style,\n        }\n        // console.log(data.www[0])\n        switch (data.send_style) {\n            case 1:\n                values = {\n                    ...values,\n                    is_run_now: false,\n                    is_periodic_tasks: false\n                }\n                break;\n            case 2:\n                values = {\n                    ...values,\n                    is_run_now: true,\n                    is_periodic_tasks: false\n                }\n                break;\n            case 3:\n                values = {\n                    ...values,\n                    is_run_now: false,\n                    is_periodic_tasks: true,\n                    // crontab_info: data.cronValue,\n                }\n                break;\n\n        }\n\n        switch (data.style) {\n            case \"mail\":\n                values = {\n                    ...values,\n                    data: {\n                        to: data.to,\n                        username: data.username,\n                        cc: \"\",\n                        bcc: \"\",\n                    },\n                };\n                break;\n            case \"sms\":\n                values = {\n                    ...values,\n                    data: {\n                        to: data.to,\n                    },\n                };\n                break;\n            case \"ding_notice\":\n                values = {\n                    ...values,\n                    data: {\n                        is_at_all: data.is_at_all,\n                        agent_id: \"12479228\",\n                        user_id_list: data.user_id_list\n                    },\n                };\n                break;\n            case \"ding_group\":\n                values = {\n                    ...values,\n                    data: {\n                        is_at_all: data.is_at_all,\n                        chat_id: data.chat_id,\n                        user_id_list: data.user_id_list\n                    },\n                };\n                break;\n            case \"ding_robot\":\n                values = {\n                    ...values,\n                    data: {\n                        is_at_all: data.atflowState == 11 ? true : false,\n                        webhook: data.webhook,\n                        secret:data.secret,\n                        user_id_list: data.atflowState == 12 ? data.user_id_list : \"\",\n                    },\n                };\n                break;\n            case \"ding_record\":\n                let aloneNo = {};\n                    if (data.is_alone === false) {\n                        aloneNo = {\n                            participant_id_list: data.participant_id_list,\n                            due_timedelta: data.due_timedelta,\n                        }\n                    }\n                values = {\n                    ...values,\n                    data: {\n                        user_id_list: data.user_id_list,\n                        is_alone: data.is_alone,\n                        ...aloneNo\n                    },\n                };\n                break;\n\n        }\n        console.log(values)\n        apis.editTask(id, values).then((response) => {\n            // this.editFormRef.current.resetFields();\n            this.setState({ editVisible: false });\n            message.success(\"编辑成功!\")\n            this.getRefresh()\n        }).catch(e => {\n            message.success(\"编辑失败,请重试!\")\n            console.log(e)\n        })\n\n    };\n\n    handleEditCancel = (e) => {\n        // this.editFormRef.current.resetFields()\n        // console.log(this.editFormRef.current)\n\n        this.setState({\n            editVisible: false,\n        });\n    };\n\n    handleEdit = (e, obj) => {\n        // console.log(Object.assign({}, obj));\n        this.state.currentRowData = Object.assign({}, obj)\n        this.setState({\n            //   currentRowData:{a:1},\n            editVisible: true,\n        });\n        console.log(this.state.currentRowData)\n    };\n\n    handleTransfer = (e, obj) => {\n        this.setState({\n            transferVisible: true,\n            transferId: obj.id\n        });\n    }\n\n    handleTransferOk = () => {\n        let id = this.state.transferId;\n        this.transFormRef.current.validateFields()\n            .then(values => {\n                console.log(values);\n                apis.transferTask(id, values).then(res => {\n                    if (res.code == 0) {\n                        message.success(\"转让成功！\");\n                        this.transFormRef.current.resetFields();\n                        this.setState({ transferVisible: false })\n                        this.getRefresh();\n\n                    } else {\n                        message.error(res.message);\n                    };\n                })\n            })\n            .catch(errorInfo => {\n                console.log(errorInfo)\n            })\n    }\n\n    onFinish = () => {\n        // console.log(this.formRef.current.getFieldValue('users'))\n        this.formRef.current\n            .validateFields()\n            .then((val) => {\n                console.log(val)\n                let datas = {};\n                if (this.state.atflowState == 11) {\n                    this.setState({ is_at_all: true })\n                }\n                if (this.state.flowState === 1) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                            username: this.state.theUserName,\n                            cc: this.state.cc,\n                            bcc: this.state.bcc,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'mail',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    };\n                }\n                else if (this.state.flowState === 2) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            to: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'sms',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    };\n                }\n\n                else if (this.state.flowState === 3) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            agent_id: \"12479228\",\n                            user_id_list: this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_notice',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    };\n                }\n                else if (this.state.flowState === 4) {\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            is_at_all: this.state.is_at_all,\n                            chat_id: this.state.theUser2Name,\n                            user_id_list: this.state.toWhoValue\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_group',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    };\n                }\n                else if (this.state.flowState === 5) {\n\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            webhook: this.state.webhook,\n                            secret:val.secret,\n                            is_at_all: this.state.is_at_all,\n                            user_id_list: this.state.toWhoValue,\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_robot',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    }\n                }\n                else if (this.state.flowState === 6) {\n                    let aloneNo = {};\n                    if (val.is_alone === false) {\n                        aloneNo = {\n                            participant_id_list: val.participant_id_list,\n                            due_timedelta: val.due_timedelta,\n                        }\n                    }\n                    datas = {\n                        title: this.state.titleValue,\n                        data: {\n                            user_id_list: val.user_id_list,\n                            is_alone: val.is_alone,\n                            ...aloneNo\n                        },\n                        tpl_id: this.state.tpl_id,\n                        style: 'ding_record',\n                        is_run_now: this.state.is_run_now,\n                        crontab_info: this.state.cronValue,\n                        is_periodic_tasks: this.state.is_periodic_tasks\n                    }\n                };\n\n                apis.createHistory(datas);\n                this.formRef.current.resetFields();\n                this.getRefresh();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        this.setState({\n            visible: false,\n        });\n\n    };\n\n    handleDelete = (e, obj) => {\n        let that = this;\n        confirm({\n            title: `删除推送`,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要删除${obj.title}吗？`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk() {\n                that.deleteAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    handleSend = (e, obj) => {\n        let that = this;\n        confirm({\n            title: ``,\n            icon: <ExclamationCircleOutlined />,\n            content: `确认要发送${obj.title}吗？`,\n            okText: '发送',\n            cancelText: '取消',\n            onOk() {\n                that.sendAction(e.domEvent, obj);\n            },\n            onCancel() {\n                console.log('Cancel');\n            },\n        });\n    };\n\n    deleteAction = (e, obj) => {\n        apis.deleteTask(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"删除成功！\");\n                this.getRefresh();\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    sendAction = (e, obj) => {\n        apis.sendTask(obj.id).then(res => {\n\n            if (res.code == 0) {\n                message.success(\"发送成功！\");\n                this.getRefresh();\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    };\n\n    handleDetail = (e, obj) => {\n        apis.detailTask(obj.id).then(res => {\n\n            if (res.code == 0) {\n                this.setState({\n                    visibleDetail: true,\n                    detail: res.data\n                });\n                console.log(res)\n\n            } else {\n                message.error(res.message);\n            }\n        }).catch(err => {\n            console.log(err);\n            message.error(err.message);\n        });\n    }\n};\n\n\n\n\n","\nimport React, { Component } from \"react\";\n // eslint-disable-next-line \nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Layout from \"../components/layout\";\n\nimport MyMail from \"../views/MyText/mailbox\";\nimport SMS from \"../views/MyText/SMS\";\nimport dingdingRecord from \"../views/MyText/dingdingRecord\";\nimport dingdingRobot from \"../views/MyText/dingdingRobot\";\nimport dingdingGroup from \"../views/MyText/dingdingGroup\";\nimport dingdingNotice from \"../views/MyText/dingdingNotice\";\n\n\nimport MyHistory from \"../views/task/history\";\nimport HistoryDetail from \"../views/task/historyDetail\";\n\nimport MyTask from \"../views/task/task\";\n\n\n\n\n\n\nexport default class Router extends Component {\n    render() {\n      return (\n        <HashRouter>\n          <Layout>\n            <Switch>\n              <Route exact path=\"/my/mailbox\" component={MyMail} />\n              <Route exact path=\"/my/SMS\" component={SMS} />\n              <Route exact path=\"/my/dingdingRecord\" component={dingdingRecord} />\n              <Route exact path=\"/my/dingdingRobot\" component={dingdingRobot} />\n              <Route exact path=\"/my/dingdingGroup\" component={dingdingGroup} />\n              <Route exact path=\"/my/dingdingNotice\" component={dingdingNotice} />\n\n\n              <Route exact path=\"/task/history\" component={MyHistory} />\n              <Route exact path=\"/task/historyDetail\" component={HistoryDetail} />\n              <Route exact path=\"/task\" component={MyTask} />\n\n\n              \n\n            </Switch>\n\n          </Layout>\n       </HashRouter>\n    );\n  }\n}","import React from \"react\";\nimport \"./App.css\";\nimport Router from \"./router/index\";\n// import { Provider } from \"react-redux\";\n\nfunction App() {\n  \n  return (\n    // <Provider store={store} className=\"App\">\n      <Router></Router>\n    // </Provider>\n \n  );\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { ConfigProvider } from \"antd\";\nimport zhCN from \"antd/es/locale/zh_CN\";\n// import * as serviceWorker from './serviceWorker';  //h5缓存\n\n\nReactDOM.render(\n  // <React.StrictMode>\n  // <App />,\n  // </React.StrictMode>,\n\n  <ConfigProvider locale={zhCN}>\n    <App />\n  </ConfigProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}